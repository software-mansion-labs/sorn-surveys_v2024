{
  "dataAPI": {
    "surveys": {
      "state_of_react": {
        "react2023": {
          "main_apis": {
            "main_apis_pain_points": {
              "freeform": {
                "currentEdition": {
                  "completion": {
                    "count": 1566,
                    "percentageSurvey": 12.04,
                    "total": 13003
                  },
                  "buckets": [
                    {
                      "count": 422,
                      "id": "forwardref",
                      "percentageQuestion": 26.95,
                      "percentageSurvey": 3.25,
                      "entity": {
                        "name": "`forwardRef`",
                        "nameHtml": "<code>forwardRef</code>",
                        "nameClean": "forwardRef",
                        "id": "forwardref",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const SomeComponent = forwardRef(render)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SomeComponent</span> = <span class=\"hljs-title function_\">forwardRef</span>(render)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/forwardRef"
                        }
                      }
                    },
                    {
                      "count": 342,
                      "id": "memo",
                      "percentageQuestion": 21.84,
                      "percentageSurvey": 2.63,
                      "entity": {
                        "name": "`memo`",
                        "nameHtml": "<code>memo</code>",
                        "nameClean": "memo",
                        "description": "`memo` lets you skip re-rendering a component when its props are unchanged.\n",
                        "descriptionHtml": "<code>memo</code> lets you skip re-rendering a component when its props are unchanged.\n",
                        "descriptionClean": "memo lets you skip re-rendering a component when its props are unchanged.",
                        "id": "memo",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const MemoizedComponent = memo(SomeComponent, arePropsEqual?)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MemoizedComponent</span> = <span class=\"hljs-title function_\">memo</span>(<span class=\"hljs-title class_\">SomeComponent</span>, arePropsEqual?)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/memo"
                        },
                        "resources": [
                          {
                            "url": "https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/",
                            "title": "A (Mostly) Complete Guide to React Rendering Behavior"
                          },
                          {
                            "url": "https://overreacted.io/before-you-memo/",
                            "title": "Before You memo()"
                          }
                        ]
                      }
                    },
                    {
                      "count": 331,
                      "id": "context_api",
                      "percentageQuestion": 21.14,
                      "percentageSurvey": 2.55,
                      "entity": {
                        "name": "Context API",
                        "nameClean": "Context API",
                        "id": "context_api",
                        "entityType": "default"
                      },
                      "groupedBuckets": [
                        {
                          "count": 230,
                          "id": "catchall_context_api",
                          "percentageQuestion": 14.69,
                          "percentageSurvey": 1.77,
                          "entity": {
                            "name": "Context API",
                            "nameClean": "Context API",
                            "id": "context_api",
                            "entityType": "default"
                          }
                        },
                        {
                          "count": 101,
                          "id": "context_api_rerendering",
                          "percentageQuestion": 6.45,
                          "percentageSurvey": 0.78,
                          "entity": {
                            "name": "Excessive re-renderings",
                            "nameClean": "Excessive re-renderings",
                            "id": "context_api_rerendering",
                            "entityType": "default"
                          }
                        }
                      ]
                    },
                    {
                      "count": 246,
                      "id": "strictmode",
                      "percentageQuestion": 15.71,
                      "percentageSurvey": 1.89,
                      "entity": {
                        "name": "`<StrictMode>`\n",
                        "nameHtml": "<code>&lt;StrictMode&gt;</code>\n",
                        "nameClean": "StrictMode",
                        "description": "`<StrictMode>` lets you find common bugs in your components early during development.\n",
                        "descriptionHtml": "<code>&lt;StrictMode&gt;</code> lets you find common bugs in your components early during development.\n",
                        "descriptionClean": "StrictMode lets you find common bugs in your components early during development.",
                        "id": "strictmode",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "<StrictMode>\n  <App />\n</StrictMode>\n",
                          "codeHighlighted": "&lt;<span class=\"hljs-title class_\">StrictMode</span>&gt;\n  &lt;App /&gt;\n&lt;/<span class=\"hljs-title class_\">StrictMode</span>&gt;"
                        }
                      }
                    },
                    {
                      "count": 147,
                      "id": "excessive_complexity",
                      "percentageQuestion": 9.39,
                      "percentageSurvey": 1.13,
                      "entity": {
                        "name": "Excessive complexity",
                        "nameClean": "Excessive complexity",
                        "description": "Too much complexity",
                        "descriptionClean": "Too much complexity",
                        "id": "excessive_complexity",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 59,
                      "id": "lazy",
                      "percentageQuestion": 3.77,
                      "percentageSurvey": 0.45,
                      "entity": {
                        "name": "`lazy` ",
                        "nameHtml": "<code>lazy</code> ",
                        "nameClean": "lazy ",
                        "id": "lazy",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const SomeComponent = lazy(load)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SomeComponent</span> = <span class=\"hljs-title function_\">lazy</span>(load)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/lazy"
                        }
                      }
                    },
                    {
                      "count": 58,
                      "id": "state_management",
                      "percentageQuestion": 3.7,
                      "percentageSurvey": 0.45,
                      "entity": {
                        "name": "State management",
                        "nameClean": "State management",
                        "id": "state_management",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 51,
                      "id": "performance",
                      "percentageQuestion": 3.26,
                      "percentageSurvey": 0.39,
                      "entity": {
                        "name": "Performance",
                        "nameClean": "Performance",
                        "description": "Performance issues",
                        "descriptionClean": "Performance issues",
                        "id": "performance",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 50,
                      "id": "double_rendering",
                      "percentageQuestion": 3.19,
                      "percentageSurvey": 0.38,
                      "entity": {
                        "name": "Double rendering",
                        "nameClean": "Double rendering",
                        "id": "double_rendering",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 49,
                      "id": "createcontext",
                      "percentageQuestion": 3.13,
                      "percentageSurvey": 0.38,
                      "entity": {
                        "name": "`createContext`",
                        "nameHtml": "<code>createContext</code>",
                        "nameClean": "createContext",
                        "id": "createcontext",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const SomeContext = createContext(defaultValue)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SomeContext</span> = <span class=\"hljs-title function_\">createContext</span>(defaultValue)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/createContext"
                        }
                      }
                    },
                    {
                      "count": 11433,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 87.93,
                      "entity": {
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 986,
                      "id": "other_answers",
                      "percentageQuestion": 62.89,
                      "percentageSurvey": 7.71,
                      "groupedBuckets": [
                        {
                          "count": 444,
                          "id": "overlimit_answers",
                          "percentageQuestion": 28.36,
                          "percentageSurvey": 3.41
                        },
                        {
                          "count": 200,
                          "id": "cutoff_answers",
                          "percentageQuestion": 12.69,
                          "percentageSurvey": 1.67
                        },
                        {
                          "count": 342,
                          "id": "no_match",
                          "percentageQuestion": 21.84,
                          "percentageSurvey": 2.63,
                          "entity": {
                            "entityType": "default"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}