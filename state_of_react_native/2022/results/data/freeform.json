{
  "rn2022__resources__resources_communities__others": [
    "Some discord channels",
    "React native singapore group in telegram ",
    "Storybook (discord community), ignite slack",
    "Reddit",
    "https://apps.apple.com/us/app/react-native-components/id1333539401",
    "Women In Tech Slack",
    "Infinite Red Community Slack",
    "RN discord",
    "React Native Contributors",
    "Discord: Tamagui, vite-plugin-ssr, XState / Stately.\nReddit: reactjs, webdev, programming",
    "infinite red",
    "Slack, Discord",
    "reddit (react-native)",
    "None",
    "Discord, Reddit, Twitter, GitHub ",
    "Twitter react native group ",
    "Twitter ",
    "Infinite Red community slack, expo discord, ",
    "Expo discord ",
    "Infinite red",
    "Twitter in general ",
    "Expo forums, occasionally Expo Discord servers, Twitter",
    "twitter",
    "React Brasil",
    "theo's t3 discord server\nmatt's typescript discord server\ntrpc discord server",
    "Twitter",
    "Expo discord",
    "reactiflux, trpc discord, theo ping discord",
    "InfiniteRed Community ",
    "Notjust.dev",
    "RN Contributors Discord Server\nReact Native New Architecture Working Group\nReact Native Releases Working Group\nr/reactnative",
    "Tamagui's Discord",
    "fb group",
    "telegram https://t.me/reactnative_ru",
    "https://www.react-native.eu/\nhttps://appjs.co/",
    "Expo Discord server. Nice way to get in touch with the core devs",
    "Infinite Red Community",
    "expo",
    "Expo developers Discord",
    "Expo Discord",
    "Twitter, Reddit",
    "Expo discord and forum",
    "no",
    "Callstack discord server"
  ],
  "rn2022__resources__resources_people__others": [
    "William candillion",
    "All of the expo and swm folks :)",
    "Theo Browne (ping.gg) Mr. BLAZINGLY FAST‚Ñ¢ aka Primeagen, Rox codes, Dan Abramov",
    "Maximilian Schwarzmuller",
    "Evan Bacon\n",
    "Evan Bacon\nAndrei Calazans\nSebastien Lober",
    "ü•ì, Fernando Rojo",
    "Evan Bacon, Fernando Rojo",
    "Evan Bacon\nMarc rousavy\nSebastien Lorber\nPaul henschel",
    "Evan Becon\nBrent",
    "Tanner Linsley, Kent C Dodds, Evan Bacon, Matt Pocock, Khalil Stemmler",
    "mark, evan, brent, fernando rojo, akinn, oscar franco",
    "William Candillon, Evan Bacon",
    "jamon holmgren",
    "Evan Bacon, Brent Vatne",
    "Evan bacon, fernando rojo, william candilon, dan abramov",
    "Jamon Holmgren ",
    "Evan from expo",
    "@thymike",
    "Pretty much everyone from expo and software mansion that are active on Twitter also infinite red. ",
    "Fernando Rojo",
    "Kent c Dodds, Dan abramov",
    "william candillion, marc rousavy, software mansion team, callstack team, expo team",
    "Kudo Chien, Brent Vatne, tsapeta, James Ide, Cedric Van Putten",
    "evan Bacon\nBrent Vatne \nwilliam candillion \ncatalin miron \ntsapeta \nfernandoTheRojo\nmrousavy\ninkdrop\nalmouro\n",
    "Kent C. Dodds",
    "Kent c dodds",
    "Janic Duplessis",
    "Fernando Rojo\nWilliam Candillon\nMatt Pocock\nDavid \"Piano\" Khourshid (Xstate)",
    "Evan Bacon, Jamon Holmgren, Marc, Tomasz Sapeta, Krzysztof Magiera, William, Jacint Varga",
    "Mrousavi - Gorhom - Nanorojo - Jay Meistrich -  Jamon Holmgren -  oblador -  Mathieu Acthernoene -  Szymon Kapa≈Ça -  Catalin Miron -  Lorenzo Sciandra",
    "William Candillon",
    "Evan Bacon, Brent Vatne, Jamon Holmgren",
    "Jamon Holmgren",
    "@mrousavy, @cedricvanputten, @Kelset, Evan Bacon, Dan Abramov",
    "Wesbos",
    "@t3dotgg",
    "Evan Bacon, Fernando Rojo, Jack Herrington, Kent C. Dodds, Ben Awad, Tomasz Sapeta",
    "William Candillion",
    "all the people working on tan stack, poimandres, t3, zod / trpc, expo & swmansion",
    "Krzysztof Magiera\nOscar Franco\nTomasz Sapeta\nEvan Bacon\nBrent Vatne\nMarc Rousavy\nSebastien Lorber\nLorenzo Sciandra",
    "EveningKid, William Candillon",
    "https://twitter.com/wcandillon\nhttps://twitter.com/mrousavy",
    "Jamon Holmgren, Evan Bacon, Brent Vatne, Kudo Chien",
    "Dan Abramov",
    "https://twitter.com/Baconbrix\nhttps://twitter.com/dan_abramov",
    "Devaslife Takuya for inspiration.",
    "Mrosavy, theo, dan abramov",
    "Catalin Miron, William Candillon",
    "Evan Bacon, William Candillon, Jared Palmer, Sebastian Lorber, Tanner Linsley, Kent C. Dodds",
    "stephen grider",
    "@Kelset",
    "https://twitter.com/swmansion https://twitter.com/mrousavy",
    "Evan Bacon!",
    "Evan bacon",
    "Vadim Savin\nWilliam Candillon\nCatalin Miron",
    "Evan Bacon",
    "Jamon Holmgren, Evan Bacon, anything SWM",
    "William Candil",
    "Fernando Rojo\nCatalin Miron",
    "WILLIAM CANDILON\nTHE WHOLE INFINITE RED CREW",
    "KUDO CHEIN !!!, evan bacon, jamon holmgreen, satiyah sahoo, fernando rojo, william candillon, noobs from software mansion, whole expo and react-native teams",
    "William Candillon, Theo - t3.gg, Ben Awad, ThePrimeagen, Dan Abramov, Yishan",
    "Evan Bacon, tsapeta",
    "The expo guys; Brente, Bacon, the vision camera guy. The folks at software mansion, call stack, the guys at nativescript ",
    "Theo, William Candillion ",
    "Jamon holmgren, theo browne, evan bacon, thomas s from expo, ",
    "Evan Bacon\nFernando Rojo",
    "Ryan Carniato (on SolidJS and all things bleeding edge), Tanner Linsley (TanStack), Daishi Kato / dai-shi (Jotai, Zustand, Valtio etc.).",
    "Infinity red team- all of them, margelo team",
    "Theo",
    "william candillon, t3dotgg"
  ],
  "rn2022__resources__resources_video__others": [
    "RN EU conf",
    "Brad Traversy, William Candillon, Academind, Colt Steele",
    "Callstack ",
    "Midudev, HolaMundo,Goncy,Ben Award, William Candillon",
    "William candillon, Catalin miron, Reactive",
    "https://www.youtube.com/@Reactiive",
    "theo ping.gg, primeagen",
    "William candillion",
    "William, Catalin Miron",
    "Max cadillon",
    "None that I follow, but have watched some from William Candillon",
    "William Candilon",
    "Youtube",
    "Jason holgrem youtube live, Codeitwrong youtube channel",
    "EveningKid, William Candillon",
    "Rocketseat",
    "Craftzdog, Candillion on YouTube ",
    "William Candillon, Software Mansion, Sonny Sangha",
    "William Candillon",
    "can it be done in react native\nCatalin Miron\nByProgrammers\nreactiive",
    "William candillion, Catalin miron, evening kid, oscar franco, dans react native lab",
    "William Candillon, Evan Bacon",
    "William Can Dillon, Moron Catlin",
    "Theo, Matt Pocok, Fireship, Ben Awad",
    "WILLIAM CANDILON",
    "Channels of Jack Herrington, William Candillon, etc.",
    "evening kid, catalin miron",
    "@t3dotgg\n",
    "Catalin Miron, William Candillon",
    "https://youtube.com/@wcandillon\nhttps://youtube.com/@CatalinMironDev\nhttps://youtube.com/@eveningkid",
    "William Candillon / Can It Be Done in React Native",
    "eveningkid ,reactiive and william candillion",
    "William candillion ,Software mansion",
    "\n",
    "Jamon Holmgren",
    "William Candillion, Theo",
    "Oscar Franco, William Candillon",
    "RocketSeat, William Candillon, evening kid, devaslife, Reactiive",
    "Jamon Holmgren on Twitch",
    "fireship.io, The Net Ninja",
    "Jamon Holmgren, The Net Ninja",
    "William Candillon\nCatalin Miron",
    "william candillon, t3dotgg, CodeAesthetic",
    "https://www.youtube.com/@rocketseat",
    "William Candillion",
    "William Candillon, Catalin Miron, Reactiive",
    "youtube.com/wcandillon",
    "William ",
    "Candillon",
    "William Candillon, Catalin Miron",
    "Vadim Savin\nNotJustDev \nnotJust.dev",
    "Clever programmer",
    "William Candillon, Theo - t3.gg, Ben Awad, ThePrimeagen, Infinite Red, Callstack",
    "All on YouTube: Theo Browne / @t3dotgg, Fireship, Matt Pocock, devaslife",
    "youtube - benawad, unsureprogrammer, ",
    "Catalin Miron on YouTube",
    "William Candillon ",
    "eveningkid",
    "https://www.youtube.com/@wcandillon",
    "Theo Brown",
    "Theo Browne",
    "william candilon - not just dev - software mansion - pusher - callstack engineers",
    "Can it be done in React Native, Theo (Ping)",
    "William candillon, catalin miron, evening kid ",
    "William Candillon\n",
    "Theo (t3.gg)"
  ],
  "rn2022__opinions__opinions_advantages__others": [
    "Code sharing, especially if you use Styled-components",
    "code sharing, development experience",
    "Performant, fast to deliver\nCommunity driven, the way meta handle open-source contributions",
    "It‚Äôs a React app using JavaScript. ",
    "Easy to pick up for a react dev. Good DX. I enjoy JS/TS and react's functional style. Multilplatform.",
    "Use the same react model to build mobile apps allow easier hiring and more code reuse",
    "It's still basically React, so no need to relearn a new framework.",
    "Uses Javascript ",
    "easy to maintain, fast result",
    "easy switch from web dev (react)",
    "Fast develoment",
    "Build on multiple platforms",
    "That I know it very well compare to other solutions",
    "Developer experience ",
    "Community performance if you know which libraries en other caveats it can be really performant en nice to wrjte",
    "very big community ",
    "Js community and great content creators",
    "Using typescript for backend and frontend is great, possibility to switch between js and ts makes it easy for junior developers to start. React and JavaScript/aTypescript ecosystem is great",
    "You can use any JS library. It's much easier to develop with. It's cross-platform.",
    "One code base two platforms ‚ù§Ô∏è",
    "Expo is awesome, multiple platforms",
    "Not writing things twice between Android & iOS",
    "You can build cross platform apps with a native UX in React. All react native skills transfer 1 to 1 with web dev. react libraries are usable in native. As a career choice react native is the best option right now",
    "Write once",
    "- Code sharing with web thank‚Äôs to react-native-web\n- easy to adopt for a react web dev\n- also I think that RN is the best way to learn react\n- there is good bindings for rescript\n- good community",
    "React based \nPerformant \nExpo\nWeb options",
    "Uses React, provides APIs similar to what you'd use on web, uses the platform",
    "React ecosystem and tooling, hot reload / code push, development speed",
    "similar to web development, performance in all platforms, consistency",
    "multiplatform, great community, freedom to build native packages, constant improvement, react",
    "Multiplatform development",
    "It's JavaScript so I enjoy it.\n\nWrite code for two platforms \n\nReduces cost\n\nFaster deploy times for both platforms ",
    "Javascript and React\nWrite once\nCommunity",
    "Transfer of web dev skills, can share most code between platforms, good ecosystem of libs, expo making everything so much better!",
    "flexibility, typescript ecossistem, native result.",
    "React (can make use of experience with Web dev. Can carry over to related things like React PDF, Email)\nDon't need a Mac for iOS dev if using Expo\nDon't need Android Studio if using Expo",
    "One codebase to maintain, delivering both on iOS and Android ",
    "Language (js/ts) + react ",
    "Development speed\nReact/JSX\nCross-platform",
    "Real native apps with a single cross-platform codebase. In combination with react-native-skia for the more graphical needs, this feels like a perfect solution to me.",
    "Fast iterations, super efficient development",
    "Typescript and react",
    "Very powerful to be able to use components that are native to the OS and also create new components composed of views. Apps are more alive with true native user interfaces compared to Flutter's 2D simulations of Android and iOS.",
    "JavaScript. Frontend, backend, and apps in JS. Native look and feel. ",
    "1. Easy UI because use JSX & React\n2. Easy adaptable for everyone that use typescript & javascript or from web development\n3. Over the air update\n4. Good performance by best practice approach\n5. Best community that always provide and contribute to this ecosystem especially Software Mansion & Expo",
    "Easy to start, even easier with expo",
    "quick iterations and OTA updates",
    "Cross-platform. It's the main reason I use it.",
    "easy to use for frontend developers\ncross platforms\nnice user experience",
    "Easy to learn and develop, fast growing for React JS developers, using JS and TS",
    "Share code between platforms including ios , android, web . Help increase productivity and switch between web and mobile app development very easy",
    "React knowledge\nNative UI elements\nJS ecosystem\nInvestment by large companies e.g. Shopify\nLove the community of people",
    "- React/Typescript\n- Multi platform\n- Good native modules",
    "Uses the platform ",
    "single code for Android and iOS, native performance in most cases, strong community",
    "Developer experience, iteration speed, OTA updates",
    "Better DX, time to market and ease of use for a relatively performant app depending on project",
    "\"Blazingly fast\" devlopement ",
    "The time to get an app up and running is a very good experience especially with Ignite or Expo",
    "We keep the native link. I can still write native code and integrate and not be super mad. ",
    "It's fast to write simple stuff.",
    "Easy to start",
    "easy ramp up for web/react developers to get into mobile",
    "Ecosystem, Maturity and broad adoption ",
    "Easy OTA update ecosystem",
    "I can use react",
    "Can reuse coding skills of web development",
    "CodePush\nReact Ecosystem's learning",
    "Tons of documentation, Videos, and StackOverflow articles",
    "Easy to make apps with",
    "React allow web developers to easily transition and vice versa",
    "Expo.",
    "Sharing, realizing stuff quickly with really good perf for multiple platforms",
    "same code for both ios and android",
    "Write truly native apps in JavaScript ",
    "OTA updates\nFast development\n",
    "It's just React\nCodesharing\nCodepush",
    "Uses React, super fast, JSX, flex box, many plugins, full native functionality.",
    "The community is the most important!\nIt just works better and is more stable I believe.",
    "Development speed. Uniform code for both Android and iOS platforms",
    "Quite easy to learn, massive ecosystem. ",
    "Hot reloading, cross platform. ",
    "1. Single codebase\n2. Coming from a web development background, I am able to build and release apps on stores\n3. Being a React developer, I did not have to learn much about how the code works\n4. Easy to style",
    "Native look and feel\nAccess to platform APIs\nUsing React.js",
    "Write once, run everwhere. Super easy to learn when you already know React",
    "Fastest and easiest way to build a multi platform mobile app, hands down.",
    "I enjoy being able to make use of what I've learned so far with React. Native frameworks are catching up with fast reload and other developer experience stuff but I still am grateful for how easy it is to make separate components for your apps",
    "Best hybrid solution",
    "Fasd bild and deployments, OTA, easy to work with",
    "Cross platform\nReact knowledge",
    "A small team can work on the web and mobile. Aldo backend devs can contribute more easily. Building a feature once for many platforms",
    "Truly native\nWell known",
    "OTA",
    "Simplicity\n",
    "Using react and maturity and eco system",
    "Best crossplatform solution",
    "For a simple-mediate level app it‚Äôs amazing. So fast, and single code base ",
    "Faster iteration speed than native",
    "Writing ui is fast. I think I still prefer react to even the recent native declarative ui frameworks. Not having to implement the same app twice on each platform is obviously huge. ",
    "Easy to learn and community support",
    "Ability to allow devs from different backgrounds to contribute to the codebase. Deploy to both ios and Android.",
    "One codebase, default flex styling",
    "Time to market, Fast reloading, Great community",
    "fast development ",
    "It's easy to catch up with its core features.",
    "Combination of web-like approach to develop, but with near-native performance, behavior, and capabilities. Other solution tries to provide either webview solution, or more native solution, and React Native takes balance between these two worlds.",
    "Too many to list. Ability to iterate quickly on multiple platforms at once, ease of knowledge transfer for web developers, support from a world class team at Meta, and a more native look and feel.",
    "Native UI",
    "Best developer experience for writing native mobile applications, aside from Flutter. Flutter has a slightly better experience in my opinion, mainly due to the language, Dart. Also harder to fall into performance pitfalls in Flutter.\n\nThat being said, I would never use Flutter to develop an app. Reasons being; Custom rendering engine, so not really native and the Dart/Flutter community and ecosystem is small and immature compared to TypeScript/React Native.",
    "It's the same as others types of coding. But it's way more FUN! And I feel the same as the ruby on rails community ‚Äîa lot of help between newcomers and experienced people.",
    "I love so much rn. Everybody knows them :) ",
    "Community",
    "Single code base for android and ios along with rich ecosystem.",
    "Crossplatform and using native component",
    "#1 by far is the community. overlap with react, a well known framework, which helps web people be capable on mobile",
    "React-based model without the unreliability of SwiftUI",
    "huge dev speed",
    "feels like home",
    "Multi-platform, sharing code between web app",
    "Easy to start with\n\n a lot of built-in components like virtualized list which help a lot to build most of the things in 2sec\n\nhuge Js community ",
    "- Very quick to prototype\n- Probably best animation support\n- JavaScript\n- JSX\n- Hands down best non-toxic community",
    "Its generally slower than a pure native app, consumes more memory, takes longer to load",
    "Low entry level, code sharing between platforms, speed and cost of development",
    "Developer experience, code sharing",
    "The fact that it‚Äôs native ",
    "quick build outs",
    "Typescript, Fast Refresh, Expo Go, Expo Prebuild, EAS",
    "Cross-platform, react native web, access to all native APIs",
    "Write in one language. Use it everywhere!",
    "OTA, JS is easy to learn and approach",
    "Write once run everywhere of course ",
    "Time to market, PoC",
    "Single code repository and anything that JavaScript / node brings for development experience. ",
    "Fast and easy to use, tied in to a great ecosystem",
    "Functional components , Styling , Expo :)",
    "Clear, understandable, easy shift from react, a lot of 3rd part libraries ",
    "Easy to learn, saves time, uses JS/React which a lot of people already know, huge community and enthusiasm, more and more Platforms supported",
    "Easy to learn excellent community ",
    "Expo",
    "- React\n- TypeScript\n- UI toolkit\n- fast feedback",
    "Web compatibility: React, React Native Web, ARIA etc.",
    "Expo, OTA, Expo Go, EAS Build, EAS Submit, Expo Prebuild, Expo Modules API, Expo Router",
    "React developers can quickly pick up React Native",
    "React.",
    "For now - nothing, except maybe CodePush",
    "Fuck Android studio",
    "Capability to use some web technologies.",
    "That I can use React skills on mobile and web based on what project I‚Äôm working on. ",
    "Rast and stable development",
    "Shipping fast",
    "Easy to make high performance apps",
    "One code base => multiple platforms.\nLarge community\n",
    "Somewhat seamless transition between RN and web, single code base for multiple platforms. JS.",
    "One way of coding for Android and IOS, able to use React which is also what I use to build web apps, its big community with mature background.",
    "React is awesome. Write once for both platforms",
    "1. It uses React so it is easy to be picked up by frontend developers\n2. Runtime performance is adaquate even on low-mid range devices\n3. Big ecosystem of 3rd party libraries\n4. Typescript",
    "Cheap, speed, js ecosystem,",
    "Simplicity\nCommunity\nExtensibility"
  ],
  "rn2022__opinions__opinions_pain_points__others": [
    "Dying and unmaintained libraries.",
    "Keyboard, TextInputs, List performance (even though FlashList helped BIG TIME, but it's not perfect yet). Video and image performance in recyclers. Generally everything that needs recycling is very hacky.",
    "Rtl issues",
    "I need more wrapped ecosystem  ( like expo classic). not want complex system like EAS",
    "js bridge",
    "Updates\nquality of dependencies\nJest & test with typescript often break",
    "Navigation, styling ",
    "Unmaintained libraries e.g image. Fabric not ready",
    "When will the full migration to the new architecture be \"complete\". All the packages needs to be updated, this makes it very hard to update some older application with legacy components.",
    "Deployment",
    "Buildtime",
    "the need to write some module in native language",
    "Debugging sucks.",
    "Dependency hell. Upgrading rn versions (due to dependencies). Lots of open source libraries lack backing and become outdated. It feels like the open source ecosystem requires more native devs but lacks them because it's more appealing to js devs.",
    "code quality and maintainance of 3rd party packages",
    "Lack of support for in app purchases",
    "Xcode when deploying and running build ",
    "upgrades ",
    "RN is awesome for small projects and MVPs, but when business requirements are growing, most people overlook the moment when react-native app should be rewritten with to native.",
    "Why are we still working with native code. Upgrades",
    "Need more example in documents over complex things",
    "everything",
    "debugging are really hard, at least Flipper always stop working besides it is too slow.\nnative styling could be more simpler.\nupgrade RN versions is confusing.\nsetup tests, at least with jest and typescript, is confusing too.\nbuild to desktop could be more simpler.",
    "upgrading react native (especially bare app that includes expo modules), vast majority of libraries focus only on android and iOS, which makes react native web and other platforms difficult to use, support for other platforms",
    "Custom native modules\nbuilds",
    "Everything that expo solves. React native without expo is just a pain",
    "Documentation",
    "Debugging, keyboard handling , textinput",
    "Some basic things like buttons, lists, checkbox, radiobutton, image lack in quality of these components and bad performance",
    "commercial components like syncfusion or kendo UI ",
    "debug",
    "Tend to fail to build",
    "Dealing with native code, Xcode, debugging tools.",
    "We need more powerful styling tools, react native styles feels years behind of what is possible on web with css",
    "Calling hooks conditionally",
    "CICD",
    "Performance\nFinding featues only available for one platform like maintainScrollposition is only available in ios. And there are many things like this.\nAlso during development there is that some code works good on ios but i need to change it to make work on android, here talking about javascript code. I know it sounds weird but have faced this mainly in how we apply styles.",
    "Styling, deployment, debugging.",
    "JS thread block when we do fetch data from backend",
    "Updating RN version. Too easy to mess stuff up when updating native files",
    "Building without expo\nUnimplemented JS standard libs (url, intl, promise utils...)",
    "Navigation. I think we need full customizable native navigation solution. Unfortunately react-native-navigation lack of customizable. And react-navigation is working on one activity. On android side it hurts sometimes. ",
    "Profiling, Improving performance, Documentation of common mistakes to avoid performance bottlenecks.",
    "Keyboard following input ",
    "No clear standard for architecting medium to large scale app. Native development has some standards like MVVM, MVC etc",
    "Migration to new versions.",
    "The \"vanilla\" package is too large in scope, would like the react-native package to provide only the bridge, JSI, module registry, Fabric. Smaller API will improve stability with fewer breaking changes.\n\n",
    "minor changes, breaking builds, hard debugging",
    "there are too many third-party libraries that would be hard to find the right one.\nnew arch is hard for libary maintainers to upgrade.",
    "Debugging, documentation (specially around new architecture), environment setup, upgrading",
    "Upgrades, Weird SoLoader crashes in some samsung devices. This happens suddenly -- maybe due to Samsung OEM updates",
    "Builds suddenly failing. Only fix is clear mode modules, build dirs etc. ",
    "-  A lot of configuration/boilerplate.\n- Styling\n- Debugging",
    "Cryptic crashes, slow performance on Android, abandoned react native libs with poor support ",
    "default FlatList perf\n",
    "We need one inhouse ui framework like Material design for all components. Disappointing installing 30 modules for the app.",
    "No resources or examples of native use. It‚Äôs something we would need to at least understand but there‚Äôs so little about this and it‚Äôs hard to keep up to date (for me) with React and React Native changes",
    "there are always problems with third party packages + testing",
    "1. Integration of Navigation\n2. Integration of Firebase\n3. Build size",
    "Migration to new architecture",
    "Patching third party libraries\nUpgrading non-expo project\nNew architecture is a breaking change",
    "Debugging is a mess and there are hardly any good resources on memory profiling and debugging. You cannot properly debug memory issues in dev mode because of the extra stuff added for Dev mode, but you also cannot debug in release mode properly and it is very cumbersome. There needs to be a lot more documentation and thought put into that side of things. ",
    "Upgrades",
    "Native module integrations",
    "Outdated and unmaintained packages and packages of poor quality",
    "Platform inconsistencies, Stylesheet API",
    "Updates, environment setup, E2E tests setup",
    "Performance issues are easy to introduce and hard to debug",
    "Changes like the new arch and Fabric are right. It‚Äôs just that the APIs for building stuff that support them is kind of terrible. Library maintainers are being pushed hard as is. They really don‚Äôt want to deal with all the complex handling of new arch / old arch (This was why i switched to writing modules in expo modules. I don‚Äôt care about the complexity, i just want to make native modules with modern languages that people can use, not debug Java and ObjC and some terrible cpp code for every architecture)",
    "Web",
    "Upgrading, Android performance",
    "The debugging experience is very frustrating (useless stack traces). The expo vs vanilla RN divide can be tough to navigate. EAS is on the right track to improve this, but it's in its early stages and still has a lot of rough edges. \n\nAlso relying on community packages which often go stale or are abandoned. ",
    "Profiling and debugging",
    "Testing",
    "New architecture is a pain to adopt (no compat layer)\nWeb should be an official target",
    "Bad xcode errors",
    "Update version is a pain in the neck",
    "version upgrades are error prone",
    "Poor performance in edge cases",
    "One of the pain points for me was video support. RN doesn't provide something ready so I had to patch some libraries together to make it work. And it's still not ideal because react-native-video is in alpha and when I first started the project, jcenter was being deprecated and it cause a bunch of issues with one of its dependencies too",
    "Debugging, Profiling",
    "Incompatibility of libraries, react native version and device os version. Can be a mess sometimes.",
    "Build tools, difficulty of writing native code using Swift & Kotlin",
    "Abandoned third party libraries and the whole upgrade mechanism ",
    "Updates, new architecture",
    "Bloat in core APIs that could be pushed onto community libraries. Sticky headers in scrollviews, KeyboardAvoidingView, FlatList etc.",
    "Feels like the react native core team is not super helpful :(, Third party abandoned libraries. No official support from the core team.",
    "Platform inconsistency, slow migration to Fabric of community libraries",
    "Updating to new versions of RN. Crashes / Bugs because of using multiple libraries, memory footprint.",
    "Debugging",
    "Using RN, Expo, and Next.js together",
    "Debugging, Keyboard Avoiding, bad error messages, Android Emulator performance ",
    "Discontinued Community library,\nUI Library not fast enough",
    "Debugging, lack of bundled native and well-optimized packages, e.g. file system, file-system routing, SQLite etc.",
    "The process to upgrade especially with other supporting libraries ",
    "Android debugging",
    "RN Version upgrades on large code based are impossible ",
    "Upgrading Versions without expo",
    "Inconsistencies in builds, installing a new dependency and app starts crashing ",
    "I just want navigation by URL without having to bother with specifying nested stacks and whatnot.",
    "Updates our app to new versions.",
    "What happened to hermes? \nLibrary authors drop RN version support easily. \n",
    "Keyboard avoiding view\nNew Architecture breaking changes\n",
    "Writing custom native views",
    "Single threaded nature of JS and RN is a big bottleneck. Official support to something similar to WebWorkers would be great. Inability to create native CPU thread is a bummer. react-native-multithreading does provide somewhat good functionality but you can't run ANY method there.",
    "KeyBoardAvoindingView\nIt is very difficult to make a responsive ui\n",
    "Native widgets on iOS and Android. Home screen. Lock screen.",
    "Lacking Bluetooth support",
    "RTL and internationalization issues\nAsset management",
    "The new architecture is not stable at all",
    "Having to be very conscious of performance. Generally it‚Äôs fine but it comes up occasionally ",
    "TESTING!!",
    "Platform specifics ( UI) .\nHaving to see xcode and Gradle to build . Thanks to Expo , EAS Build and submit , i didn't even have to touch a MAC",
    "Upgrading is the main one. Recently spent 3 days on upgrading only to give up and delete the branch. ",
    "Version upgrading",
    "The need for external dependencies to implement basic things",
    "ecosystem changing way too fast and it's chaotic. No time to learn new features and no idea which features to learn and how to get information about news",
    "Slow bundler, missing support for PNPM",
    "Debugging experience and hot reload (still kills the app in the simulator whenever I introduce most changes)",
    "Native modules is still hard",
    "The classic of having to keep up with changing modules that break. fearing to upgrade packages or sdks or underlying platforms so builds won't break. Spending quite some significant time to make build works instead of building features.",
    "Styles, animation, debug, platform api",
    "Debugging in vscode still flakey",
    "responsiveness. I mean media-query like native equivalent.",
    "Styling is harder in RN than any alternative.",
    "upgrading and cicd pipelines /automated deploy and testing",
    "Build times and build errors. Difficulty of setting up a good mono repo for next js and expo. Navigating over all sucks. ",
    "Flex gap still not released, metro outdated (es module support), some native plugins out of date.",
    "Styling",
    "Native components\nStyling\nDeployment",
    "Upgrades are painful, desktop os modules are thin",
    "1. There's no responsive scaling stylesheet based on screen size for react native that active maintained right now\n2. Working with splash screen is still pain in android for example with expo-splash-screen, with \"native\" type splash screen it's just can show logo in middle, and can't show stretching image or consist 2/3 images in one splash screen opening in runtime, for this solution can use windowBackground to transparent, but it make the app not seamless when opened\n3. Some people say that performance in react native is worse, but i think it's can be reduced by using hermes, and use best practice, i hope generally by default it's change more fast and same like native\n4. Write native modules & native view",
    "Upgrade to new versions, compatibility between platforms, some old feature that is not  implemented (like yoga feature for styling or theses stuff)",
    "Styling,navigation",
    "the latest updates have been quite fragile",
    "Speed, debugging",
    "Accessing native API. \nDo I need to learn C++ for TurboModules? Is JSI simple enough to get started with?",
    "Debugging, Animations, Navigation, canonical/proper OTA solution, Upgrading",
    "Dealing with native errors can be tedious. Feels like the code is held together by a string sometimes",
    "Environment setup can be tricky sometimes and hard to debug",
    "Native 3rd party dependency integration.\nRed error screen doesn't help pin pointing issue.",
    "Still too many errors based on XCode Android studio setup ",
    "Upgrading bare apps\nDebugging tools ",
    "Lists, Lists, Lists",
    "defragment/obsolete react native modules. Some of them are out of date and it has no guarantee that someone will update/fix them.",
    "Dropping support for older platform SDKs too quickly, not maintaining prior releases for long enough ",
    "Setting up the envirnoment for development",
    "Less platform apis, need to be dependent on other library.",
    "Upgrade, out of date libraries, new architecture confusion, Hermes not supporting async generators, the web",
    "debugging, error messages",
    "Great UI libs, lack of native components (context menu, etc)",
    "Steep learning curve ",
    "Updating version of the app",
    "metro bundler does not work well in monorepos",
    "Lots of libs are not well maintained \nGap between js and native \n\n",
    "Random build issues that require cache clearing etc‚Ä¶ would prefer if core RN focused on making sure everything builds all the time.\n\nMetro doesn‚Äôt support symbolic links which makes developing packages really annoying - why metro?",
    "Upgrading apps can be a challenge, the new architecture is going to be a tricky migration to get old dependencies migrated. ",
    "making small projects is easy, making complex & optimised apps is way harder than it should be.\nsometimes it feels like we are fighting react & and react native themselves instead of focusing on the app's requirements",
    "3rd party libraries and native integration lags behind the RN core ecosystem",
    "upgrade",
    "upgrading, specially when depending on other libraries. unmaintained libraries. js performance not reliable",
    "RN is not Multithreaded ",
    "Building and submitting apps especially on Windows",
    "Animation, speed",
    "Performance on low-end Android devices is terrible.\nStyling is still a pain, specially when trying to build for the web in the same codebase. No solution available right now is ideal for both scenarios.",
    "Upgrading app",
    "Upgrading react native, some unclear error messages ",
    "Upgrading react Versions",
    "Upgrading of xcode project is hard. Performance in lists and animations is hard to get to native standard but feels like its getting a lot better lately (reanimated, f√∂ashlist, wishlist etc).",
    "- monorepo are hard to maintain\n- native libraries are hard to bootstrap",
    "Upgrading - new architecture",
    "Upgrading",
    "- Build time (EAS Build is improving things)\n- Frequent platform changes break third-party libraries and render them unusable very quickly. I'm afraid to use anything not maintained by Expo.",
    "Lack of documentation for the new architecture",
    "Performance",
    "- poorly maintained packages that are providing well used features\n- still some performance bottlenecks",
    "Keyboard avoiding view",
    "New architecture still not possible due to it requiring 3rd party libraries to support it",
    "performance",
    "The whole development experience is pain",
    "Rendering basic components with a shared style still doesn't always give you the same output across iOS and Android in some cases.\n\nKeyboards and inputs (KeyboardAvoidingView)\n\nNavigation is still more complex than it should be for me personally but I think Expo Router is a mental model I can get behind.\n\nMy biggest issue is uncertainty with what packages or libraries are meant to run in expo. Before, it either worked with Expo or it didn't, and now with turbo modules, fabric, JSI, Skia it's very unclear to me what I can slap into an Expo go app vs what I need to build first. A lot of the documentation assumes you've been consistently following React Native along this whole journey and \"just following the documentation\" isn't enough for beginners who come from an environment where they usually just npm install something or look it up under MDN.",
    "Upgrades, visual effects and animations",
    "Creating modules ",
    "Bundler speeds, module system support, dedicated runtime, web feature parity",
    "Eco system catching up. I wish all the important libraries were taken care of paid people who constantly make sure it‚Äôs working correctly. Because depending on none paid people is unfair and unreliable ",
    "1. Upgrades between versions\n2. Styling system too different from CSS and limiting in many ways (e.g. gap)\n3. No easy free deployment method\n4. Production app sizes are too large compared to native apps\n5. Navigation feels too clunky compared to file based routing like Next.js\n6. Splash screen handling feels too clunky and would like option to easily load any resources (e.g. videos) on app startup",
    "Migration to the new architecture, a well defined route in upgrading libraries to the new architecture ",
    "It‚Äôs not as easy to move quickly in RN. For web for example, there are very complete UI libraries (Mantine) and stacks (T3 stack) that feel ahead of the RN community. ",
    "Navigation,Performance",
    "Keyboard, unified navigation system for multiplatform, crashes on reload, upgrading, lack of good documentation for JSI ",
    "migration is soooüí©",
    "Performance ",
    "complexity of integration of native modules",
    "Keyboard, Debugging",
    "Share extension, keyboard, performance",
    "mobile build pipelines",
    "rn version updates...",
    "The keyboard handling. Very difficult to make a good UX with keyboard both on Android and iOS.",
    "Expo Router can't come fast enough!",
    "New Arch, Fabric migration",
    "upgrading and performance on lower end Android devices. difficult to pinpoint causes of crashes on obscure devices and fix them as a professional developer",
    "new architecture doesn't support backward old libraries",
    "Dev tools integration (devugging)",
    "new version updates, huge amount dead libraries",
    "keyboard handling",
    "Using Plain RN updating is still very painful, thats why Expo is a good first entry point for most RN developer or aspiring devlopers. The update process in most companies which I took over work were done like this: \"Creating new RN project copy code over and reintegrate settings for iOS and android\". Which was less painful then running major upgrade version via the RN-upgrade-tool.",
    "Styling in general, we need more features from CSS if possible.\nMore basic components provided by React Native teams that empowers both Android and iOS ecosystems.\nThe new architecture needs to be explained in a easier way, in the current state I find it so hard to learn.",
    "Keeping up the dependencies",
    "Upgrading React Native version is a pain and not just for users, but maybe even more pain for library authors. It might be the cause of why so many libraries are not actively maintained.",
    "Everything is pain for cli users. Expo is just making it way to somehow enter into my codebase as cli only and non expo owned libraries are often discontinued.",
    "new arch made rn upgrades hard",
    "upgrading react-native on complex app structures",
    "Initial setup on a new machine is a pain. There‚Äôs a lot of moving pieces so no constructive suggestions ",
    "too buggy, no native ui components, lot of 3rd party libraries are incompitable. pain to debug and very bad experience.",
    "Every 6 months you have to revisit all your codes and upgrade to latest library versions in order to cope with future bugs. This is resource consuming and fires question marks in customers. ",
    "Debugging Hermes and Promises... ",
    "Custom targets (share extensions etc) for iOS\n",
    "build speed, deployment speed, testing",
    "Animation & Navigation together and separately!!!",
    "Apple's App Store & Google's Play Store",
    "i need very 3rd party library for basic components",
    "I still few a bit annoyed about issues with performance in React Native. I feel like we still have room for growth in this direction.",
    "Debugging & when a random character in the render-segment breaks the app",
    "Debug the layout, Run the code on an emulator or device",
    "CONSTANT EVOLUTION OF EVERYTHING, \nPERFORMANCE IS STILL A BOTTLENECK FOR SOME THINGS",
    "Too many languages :) ",
    "App build/distribution pipelines (CI/CD)\nMultiple options rather than a single best practice (Touchable* vs Pressable, etc)\nDebugging effects",
    "Debugging is the top problem. Getting profiles of the Js runtime. Understanding native crashes. ",
    "- Many native dependencies aren‚Äôt well maintened\n- react native api design should be more aware of other target than mobile (but it‚Äôs in progress, pointer api seems great !)\n- reanimated and gesture-handler are essential for a good app feeling today, i like animated for simple things but layoutAnimations are essential today (and i don‚Äôt talk about the current layoutAnimation api on RN‚Ä¶)",
    "Upgrading libraries and version and adress specific platform UI differences",
    "It's too easy for things to work in dev and crash/hang at the splash screen in prod.\nDebugging\nBuild problems caused by incompatible dependencies\nProblems inherited from React (data fetching, useEffect)\nImage processing/GL",
    "The relation between native modules, and ReactNative",
    "Better support of react-native-web and better universal platform support",
    "No standard library/lacking standard library\nMany APIs are delivered by 3rd parties or by community open source projects\nDebugging",
    "Popular modules deprecated or need help to maintain",
    "It feels very hacky at times, and things don‚Äôt work for long if left alone. Overall feels fragile ",
    "Component libraries",
    "RN Updates, outdated packages",
    "By far and in comparison to flutter project is the time to update an ¬´¬†old¬†¬ª project to recent versions.",
    "It's often so behind native and web in so many ways. Want to do something as simple as show a menu that feels native? That requires spending weeks building and maintaining a library of your own. UI primitives are very behind and are all community-maintained.\n\n",
    "Flat list white screen",
    "no ready-to-use components like a flutter, need developer support like a flutter (for beginners docs, components, standards, startup templates)",
    "Native integrations, Performance bottlenecks",
    "Boilerplate ",
    "Mono repo support is lacking",
    "Add new package or update version . Building time is also a pain point",
    "sucky packages that are required",
    "Debugging, Tools",
    "Keyboardavoding view,  environment variables",
    "Flipper‚Ä¶we need a better debugging tool. The amount of times flipper has caused issues during runtime or installing is a pain.\n\nUpgrading is still complicated for large projects.",
    "Setup without expo is a pain, xcode sucks, updating is a pain, aligning team laptop settings etc is horrible, iOS pod management and download process is extremely slow"
  ],
  "rn2022__tools__tools_other_tools__others": [
    "Babel.js, Metro, ESLint, Prettier, GitHub Actions, GitHub Copilot"
  ],
  "rn2022__tools__tools_starter_templates_other__others": [
    "npx expo init",
    "create-solito-app",
    "callstack/repack",
    "expo init",
    "I build our own STRV project template",
    "Custom company template",
    "i don't use ignite because i don't want to use mobX",
    "solito blank boilerplate",
    "Tamagui starter",
    "create-react-native-plugin",
    "tamagui starter, solito starter",
    "Own",
    "For JS/TS balance : none of them because writing with Rescript",
    "expo",
    "create-react-native-library",
    "create-react-native-app",
    "Own template",
    "nx",
    "I use `thundersdata-frontend/rn-template` to initiaize rn project in my company",
    "expo-starter"
  ],
  "rn2022__resources__resources_initially_learn_react_native_other__others": [
    "Reading source code",
    "App.js",
    "Reading code. Building libraries.",
    "Github, Twitter",
    "github",
    "GitHub source ",
    "React native radio podcast",
    "github and twitter",
    "ChatGPT and community discords",
    "Working on projects, learning on the job",
    "Google ",
    "StackOverflow",
    "Twitter",
    "Newsletters",
    "Twitter and blog posts",
    "Open source projects",
    "CAN IT BE DONE IN REACT NATIVE",
    "twitter",
    "GitHub issues LOL",
    "Source code ",
    "Blogs\n",
    "Blog posts",
    "Trial and error",
    "Evan Bacon‚Äôs Twitter",
    "Practise on-the-job.",
    "Discord community",
    "Medium, dev.to",
    "Blogs\nTwitter",
    "By following developers on Twitter",
    "Blog posts, pairing ",
    "Blogs/Articles",
    "Following RN devs on twitter"
  ],
  "rn2022__developer_background_industry_sector__developer_background_industry_sector_other__others": [
    "gaming",
    "Food, sustainability ",
    "open source library",
    "Fintech",
    "Planning tool",
    "HR, F&B, Lifestyle",
    "Social network\nResearch projects",
    "Sports/outdoors ",
    "Sport, performance, scouting, management system ",
    "Benefits",
    "Productivity / Business",
    "Technology",
    "Dating",
    "Fitness",
    "Wellness and fitness apps ",
    "IoT",
    "Food and Delivery",
    "Productivity",
    "Gaming",
    "Smart home",
    "Mindfulness",
    "Environmental services and employee engagement programme. ",
    "Sports",
    "Photography and art",
    "sports",
    "sports and health",
    "Equestrian",
    "Banking",
    "Fotography",
    "Sports/outdoor recreation ",
    "on demand work platform",
    "Sport",
    "petroleum management",
    "Gambling",
    "Religious",
    "gambling",
    "HR",
    "retail",
    "Games",
    "Music"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_internationalization_other__others": [
    "I18n-js",
    "i18njs",
    "react-intl\nlingui",
    "Custom",
    "typesafe-i18n",
    "FormatJS",
    "Own",
    "polyglot",
    "lingui",
    "i18n-js",
    "lingui js",
    "expo-localization",
    "react-intl",
    "prefer to write own util",
    "@wojtekmaj/react-t",
    "i18n-js expo-localization",
    "Own solution ",
    "expo-localization is the only package I‚Äôve ever used for this. ",
    "react-native-i18n",
    "Lingui\nReact-intl",
    "custom solution",
    "LinguiJS",
    "fluentjs",
    "React ridge translations"
  ],
  "rn2022__state_management__state_management_other__others": [
    "redux-loop",
    "micro-observable \nUsed it > Would use again",
    "Used MobX, may use again",
    "MMKV",
    "https://github.com/anurag6713/ninja-store",
    "Mobx-state-tree., serialization is an issue with navigation persistance though. Other than that works ok.",
    "MobX-State-Tree ",
    "mobX",
    "urql, react-atomic-state",
    "Mobx-State-Tree",
    "XState (for in-app flow management)",
    "I've used SWR too, similar to react-query\nLiked it and would use it again",
    "SWR",
    "Valtio",
    "Redux Toolkit ",
    "Relay - we use this as the primary data layer and partial state management for our apps",
    "Effector",
    "Redux toolkit",
    "MobX",
    "xstate",
    "XState",
    "Redux saga",
    "mobx",
    "Also not interested in mobx\nMaybe Xstate could also fit into this category. Would like to learn",
    "valtio",
    "MobX / MobX-State-Tree",
    "Mobx, XState\n",
    "MobX State Tree, XState. Weird they weren‚Äôt mentioned.",
    "effector",
    "Mobx",
    "Xstate",
    "We use state-decorator, which is our own open source state management library",
    "MST",
    "Urql: use it, would use again. Very heavily invested in it with custom exchanges to do local CRDT-based optimistic state on top of remote state.\nXstate: use it, would use again. Very heavily invested in it for complex interactions.",
    "MobX: Heard of it > Would like to learn",
    "MOBX",
    "Mobx ",
    "MobX > would use again",
    "Using MobX",
    "Relay",
    "Re-Frame (via ClojureScript)",
    "Mobx state tree",
    "MobX, it makes complex app simple.",
    "MobX-State-Tree",
    "urql\nin general graphql client libraries takes care of most state management, add a few React Contexts and it's usually enough ",
    "use-context-selector",
    "MobX State Tree",
    "overmind",
    "By using rescript with pattern matching is enought for state management",
    "Mobx-state-tree",
    "MobX is only and the best option for state management, I don't know why is not mentioned here",
    "Mobx and MST",
    "React-ridge-state"
  ],
  "rn2022__data_fetching__data_fetching_other__others": [
    "react-native-network-client",
    "RTKQuery",
    "RTK-query",
    "RTK Query",
    "I've been using Orval for REST API TypeScript generation from Swagger. It works great! I was trying to find a similar types generation tool for REST after using Apollo codegen for GraphQL and found this gem.",
    "apiSauce",
    "Rtk query ",
    "WS",
    "Ky",
    "Rtk query",
    "apisauce",
    "Hasura",
    "redux-toolkit-query",
    "gRPC",
    "urql",
    "Wretch",
    "Urql",
    "Redux Toolkit Query",
    "Realm",
    "Urql: use it, would use again.",
    "URQL"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_interactions_other__others": [
    "Excited to try the new PointerEvents API",
    "react-xr",
    "Gesture handler has memory problems and seems very unstable. "
  ],
  "rn2022__opinions__opinions_missing__others": [
    "Better image caching, better flatlist performance",
    "iOS widgets, Android widgets",
    "Web",
    "Native API like media processing like audio, video, images ",
    "Over the updates, high abstract ",
    "build to linux desktop",
    "iOS-like blur on Andriod",
    "Debugging",
    "Better performance monitoring and tools to detect memory leaks",
    "responsiveness. I mean media-query like native equivalent.",
    "Notifications and native navigation out of the box, proper recycling lists, multi-thread",
    "Share extension, ear sensor, keyboard in general",
    "Support for modern CSS features in StyleSheet API (Media Queries, Grid, Responsive Units, ...)",
    "Basic stuff and performance still not where it needs to be. E.g we still can‚Äôt use fabric ",
    "Web navigation",
    "improving the test libraries and official web support ",
    "Being able to apply effects to native components such as filters, for instance grey scale",
    "Advanced UI layout and components. Flatlist is too limiting. Debugging native and js codebase is still very poor. ",
    "Building apps should be as simple as buimding webapps from the setup perspective",
    "Styling is far, far behind Web. Styling in web is a breath of fresh air. I can use a stable flex gap, filter/backdropFilter/transformOrigin, and more. You can't even open multiple modals on iOS, or have anything that closely resembles position: fixed and displays on top of modals. There's no sticky position. \n\nThere's no IntersectionObserver to detect if an element is in view. Using a FlatList for that use case is untenable.\n\nMeasuring performance hiccups is nearly impossible in React Native. Errors on the native side are often impossible to parse. \n\n80% of libraries that solve an important need haven't been touched in years.\n\nIf you want to add complex interactions, animation states, etc. to a native navigator, good luck. If you open the Honk for iOS app, you see beautiful native animations. Same goes for Square Cash. These apps could not be built with React Native. Airbnb's Shared Element Transitions give a similar reaction.",
    "widget, wearable integrations, more sensor!",
    "Proper secure storage implementation with biometry support. All existing have security issues and doesn‚Äôt comply with PCI. ",
    "Support for essential feature like camera , permission‚Ä¶ those features should not depend on third party library ",
    "A perfect Tailwind solution",
    "Better support for AR/VR, keyboard and Swift",
    "Seamless debugging support: Flipper does not work for iOS with use_frameworks. Hermes debugger does not show network requests and other tools. ",
    "Flex gap, more web CSS properties.",
    "Micro-Frontend solutions. Repack is working on it, I know but other cross platforms can‚Äôt handle this but react native can. We think more about it\nTransform-Origin\nMore css features\nAndroid Jetpack Compose Integration ",
    "Styles",
    "Multi core architecture, better navigation",
    "Multithreading",
    "custom refresh control\nkeyboard\nnotch",
    "An easier way to manage native code on RN cli like expo did",
    "A simple way to manage a dark and light theme.",
    "Shared element transitions!!! That one package isn‚Äôt very good since it‚Äôs overly complex to implement and only works with the non-native react navigation navigators ",
    "A installer that resolves all requirements after Android Studio and Xcode are installed, official testing solutions including E2E",
    "first class maps support, better BT support",
    "Better documentation learning for JSI/TurboModules/Expo SweetModules",
    "A best Expo support ",
    "Debuggine",
    "Everything that expo has",
    "First party libraries. Lean core made sense to get rid of two many modules that where just bundled in, but now it feels like RN is super barebones and you NEED third party libraries for pretty much anything. Navigation, Clipboard, Webview, Audio and Video and etc. These should not be third party, because then supporting stuff like new arch becomes hell on them",
    "Fast image loading. Fast SVG renderer WITH click events on paths like te browser has. ",
    "A better way of dealing with SQLite. Current solutions aren‚Äôt that scalable. Something similar to room and core data without the parts that suck üòÖ \n\nPerformance on android is still tricky and in general react native runs much better on iOS. ",
    "File system based routing ",
    "Platform specific UI elements, navigation and good solution (reanimated üòâ) for implementing animations out of the box",
    "Buy in from the two major platforms. If they keep in mind the cross platform solutions and structure things with that in mind, it would go a long way. ",
    "Recycler View, Everything using JSI by default",
    "TESTING!!",
    "There is a lot of garbage collection overhead for React and React Native, and almost no public benchmarking suite",
    "A really good list component that doesn't use the bridge. ",
    "Bluetooth support lucking",
    "More diverse styling options, e.g. grid from web.",
    "Proper css support",
    "Better & performant data storage",
    "Native iOS components (SwiftUI Components)",
    "better support for overlays (modals/sheets/toasts, etc)\nbetter support for blobs, array buffers, etc",
    "Basic animation support in StyleSheet (ex: CSS transition equivalent)",
    "More CSS features",
    "Augmented Reality",
    "1. Not all community library ported to new architecture\n2. Still missing (not created yet from community) some new api feature from both android and iOS in react native \n3. Something that other frameworks has and react native doesn't have? ‚ùì",
    "- OTA updates\n- simplicity of developing on dynamic screen sizes and orientations (usually highly designer led but I'm curious if there's a way that engineering could simplify this instead of a ton of ternaries/conditional checks for orientation)\n- Additionally, knowing the performance/memory tradeoffs for using memoization and having tooling to properly quantify performance of the app. Reassure and react-native-performance and the new performance tooling from Shopify are in the right direction but I still find a missing place for developers to be able to quantify performance of a component or any code really (or all of the app functionality) locally and through CI. The existing tooling has limitations where I don't want them running in production for users to potentially slow them down or, in the case of reassure, many jest tests in more developed apps are highly mocked out so knowing how the app actually feels is tough. Ideally, what reassure shows in their docs about the performance delta of code within a pull request is the goal but maybe tied into some E2E tests and reporting back",
    "ESM, faster bundlers, decoupling runtime from metro, simpler navigation solutions (eg expo router)",
    "CLI tool that automates the following:\n1. Upgrade process for RN and 3rd party deps\n2. Publishing app to stores\n3. Let you choose optimizations for each platform (e.g. use of Hermes, app bundles on Android, etc)",
    "Call platform apis in JavaScript like nativescript ",
    "A great debugging toolset",
    "everything they abandoned for community to then rot",
    "better support for svgs, styles (css props)",
    "Web cross-platform",
    "Proper portal support for navigators\n\nI.e. popup an overlay of another screen temporarily to avoid code deduplication",
    "I18n built in support\nFile based routing (help us expo-router!)\nNew archi lib migrations ",
    "Easy debugging",
    "Framwork Stability. Through the time react native library come up with changes which often breaks things or librarys goes into unmaintained state. ",
    "easier setup (for beginners)",
    "Truely good TextInput performance, better keyboard handling overall, easier sticky keyboard components cross platform, better video and audio libraries that truely work with recycling and hls",
    "good video player libraries is really missing point. ",
    "Proper keyboard handling",
    "Improving flatlist simplifying animations",
    "an easier way to maintain app on the mid/long term.",
    "Miss a lot of components, there is just some views, I would like to see more things like SwiftUI, Composable and Flutter. I would like to see a more compatibility to CSS API.",
    "It's frustrating not being able to use features like native modal detents on iOS",
    "stable database",
    "Apple Watch support :)",
    "Integration with Google, apple, Facebook authorizations ",
    "Callkeep, pushkit",
    "Shadows on Android that have parity with iOS\n",
    "Being able to develop on web platform (much faster and easier to test responsiveness) and then open currently viewed page in browser with context (connected user), directly in an emulator and/or a simulateur (to validate display on other platform). ",
    "Multithreading in JS",
    "- Testing frameworks not as good/reliable as web",
    "Official state managment for react, Easy debugging ",
    "Better web support without increasing the bundle size on the web so much.",
    "- Poor debugging experience\n- Poor react native web support\n- CSS grid",
    "Easy web compat, css grid and friends ",
    "The ease of web",
    "grid",
    "Sad that new architecture is not meant for performance ü•≤",
    "Some css features (gap, grid, ...), better Android emulator ",
    "ui components",
    "Force Apple to let develop iOS apps on Windows ;)",
    "- Fetch API with ArrayBuffer\n- stable synchronous storage API (react-native-mmkv is not stable)",
    "Set of paid/battle tested packages (audio,ads,UI,‚Ä¶)",
    "Background processing APIs",
    "WebWorker like API",
    "Multithreadinng ",
    "no well maintained library to handle Running a background timer/task ",
    "direct access to native apis (apple pay for example)",
    "Native courses (ios, android) that target react devs. Missing css features (gap gradient shadows...). Flatlist api is annoying, I keep reversing its inversion of control.",
    "There are no native components from platforms, like drawer or bottom sheet",
    "A integrated IDE like we have android",
    "Box shadow on android",
    "A more exhaustive UI component library. I end up using 2-3 different ones (Paper, Elements, etc) and that isn‚Äôt very effective. ",
    "A component library that doesn‚Äôt enforce styling, similar to Headless UI, specifically for react-native",
    "Forms, native like validation of input texts",
    "some css feature - better js bundling with tree shaking - more descriptive guides",
    "Development, debugging tools on par with web development.",
    "Speed, more speed, easier deployments",
    "Styling heritage ",
    "Symbolic links",
    "Efficient 3 platform development is not there yet, waiting for Tamagui + Expo Router",
    "Grids, Variable Fonts, More Native components from iOS/SwiftUI and Android/Jetpack Compose",
    "- widgets\n- permissions (so essential, should be on core)\n- android navigation/system bar config\n- safe-area-view should be on core, because, like permission, so many dep depend on it, and it‚Äôs mandatory to habdle it for an app today (even on the web)",
    "Navigation, Debugging, Android Performance",
    "Good documentation for writing native modules/views.",
    "Grid CSS",
    "1. Streamline the release of apps - a lot of manual processes which has to be repeated\n2. Official way for OTA\n3. Official documentation on how to release apps on stores\n4. Official navigation library to handle complex stacks/tabs navigation\n(Official = Out of the box)",
    "I'd like for the URL interface to provide the missing methods and properties",
    "AR/VR",
    "More doc about native modules ",
    "Css features",
    "Flat list which have same performance as recycler view",
    "A better debugging experience",
    "better navigation library that doesn‚Äôt keep all my screens mounted nor freeze them as a workaround. react navigation feels like a temporary solution that just stayed as the accepted solution",
    "File system access out of the box, file system routing, SQLite",
    "Game development with Expo is really poor. Methods to integrate Unity and Unreal engines would probably drive lots of people to react-native / expo ecosystem. ",
    "Localisation\nPerformant complex UI (recyclerlistview like FlatList)",
    "Lots of web compat. Just do more of what the web supports for both styles and props. "
  ],
  "rn2022__react_native_specific_features__react_native_features_ota_updates_other__others": [
    "EAS is the only suitable option, though it has a long way to go.",
    "jpush would be used frequently in China.",
    "Bitrise"
  ],
  "rn2022__styling__styling_techniques_other__others": [
    "Custom hook to \"improve\" the StyleSheet API to support dark/light themes",
    "emotion",
    "native-base",
    "StyleSheet API FTW",
    "styled-rn - lots of people are sleeping on this!",
    "Native Base ",
    "own styling solution",
    "responsive-react-native",
    "Eva design system ",
    "Emotion",
    "Whirlwind",
    "\n",
    "RNUI",
    "Native Base",
    "Nativebase",
    "Used Dripsy for a while. That could fit it these options too.",
    "twrnc",
    "My experience with dripsy was really good. Fast and easy to use with unlimited applications",
    "Dripsy",
    "Stitches Native",
    "It is something necessary when using hooks like useColorScheme(), but it could get a lot better.",
    "ESStylesheet",
    "native base"
  ],
  "rn2022__resources__resources_course__others": [
    "Stackoverflow, reddit ",
    "Siso quester studios",
    "Callstack blog",
    "Twitter üê¶ ",
    "Medium.com",
    "rocketseat",
    "udemy, youtube",
    "Udemy ",
    "academind",
    "Medium, udemy ",
    "https://www.udemy.com/course/the-complete-react-native-and-redux-course/learn/lecture/15706614?start=0#content",
    "egghead",
    "callstack",
    "stackoverflow, github",
    "YouTube, medium, mdn, stack overflow, twitter",
    "React Native The Practical Guide - Academind",
    "Udemy, Kent c Dodds ",
    "Platzi, udemy youtube",
    "RN docs, React docs, source code in github",
    "Udemy",
    "Notjust.dev\nAcademy.notjust.dev",
    "Medium",
    "Udemy YouTube",
    "youtube - udemy",
    "Teamtreehouse.com\nEgghead.io\nMedium.com\nYouTube.com",
    "Stack overflow, Reddit, Twitter, occasionally Youtube or other sites I find via a Google search",
    "reactnativeschool",
    "Twitter",
    "dev.to",
    "reddit, twitter",
    "https://swmansion.com/academy/workshops/",
    "I‚Äôve watched one in Udemy. Read a book on RN and I‚Äôm subscribed to William Candillon. They all failed in truly explaining the fundamentals and go deeper than react and react native sadly.",
    "CS50 mobile",
    "Rocketseat ",
    "Mediums , react native community, github",
    "Udemy for courses, Twitter for some latest news or exciting things from various React Native contributors.",
    "Epic React",
    "twitter"
  ],
  "rn2022__resources__resources_podcast__others": [
    "None",
    "callstack",
    "Syntax, The React Native Show",
    "React native podcast / Swift by sundell",
    "React Native Radio, The React Native Show",
    "React Native Radio",
    "The react native podcast",
    "React Native Radio\nThe React Native Show",
    "none ",
    "React narive podcast (infinite red)",
    "https://reactnativeradio.com/",
    "Syntax, React Native Radio",
    "React native radio",
    "React native radio\nSyntax fm\nChangelog js party \nShopTalk",
    "REACT NATIVE RADIO",
    "react-native radio",
    "react native radio ",
    "React Native radio",
    "Callstack, react native radio, infinity red",
    "React Native Radio\nThe React Native Show Podcast",
    "Rn radio",
    "react native radio",
    "React Native Show Podcast",
    "React Native Radio, The React Native Show Podcast",
    "React native radio podcast",
    "React native radio ",
    "React native podcasts by infinite red ",
    "Callstack ",
    "React Native Radio, React Podcast, JS Party, The React Native Show Podcast, Flight Review,  devtools.fm, The Eric Normand Podcast, Coding Blocks, ",
    "react native podcast"
  ],
  "rn2022__deployment__deployment_other__others": [
    "GitHub Actions using CLI tools to form a fully automated submission process",
    "Xcode cloud",
    "Firebase and via our CodeMagic pipeline ",
    "I'm happy with Codemagic",
    "https://www.runway.team/",
    "Bitrise CI/CD",
    "GitHub actions",
    "Bitrise",
    "Bitraise",
    "Codemagic",
    "XCode Cloud",
    "Custom Circle CI Orb (or use what the core team has) / Github action for building and deploying the app. Takes a bit longer to setup but waaaaaaay easier and more manageable. Do it once, enjoy always",
    "We use a custom script to build and then we manually upload.",
    "Bitrise.io ",
    "Bitrise ",
    "Github + fastlane"
  ],
  "rn2022__resources__resources_read__others": [
    "Medium, blog logrocket",
    "Siso quester studios",
    "medium",
    "React weekly",
    "React Native News, This Week in React",
    "Fireship, react native subreddit, various machine learning and AI subreddits etc",
    "Expo Blog",
    "Pragmatic engineer, medium, log rockets",
    "Week in React",
    "Medium ",
    "Twitter",
    "Red Shift",
    "Notjust.dev",
    "Exposition, App.js workshops",
    "onwebfocus.com",
    "Newsletter Sebastian Lober",
    "Software mansion, wix engineering ",
    "Dev.to, Medium (numerous), Kent C. Dodds, Official RN Blog, Twitter ",
    "Bitrise, call stack, hashnode ",
    "thisweekinreact - react native newsletter by infinite red",
    "React Native newsletter",
    "Shopify Engineering sometimes, various Medium articles normally.",
    "Medium",
    "Expo, Blog rocket, dev.to",
    "Medium, kodeco, react native weekly",
    "Software mansion, expo blog",
    "Twitter üê¶ ",
    "None",
    "Expo",
    "overreacted, kentcdodds, Hackernews",
    "This Week In React\n",
    "Medium\n",
    "ThisWeekInReact",
    "Twitter, Reddit",
    "Huge shout-out to LogRocket's blog. I have never used their service but they write really good articles for doing things in React and React Native.",
    "Medium, dev.to, blog post from react native companies.",
    "Medium, dev.io"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_storage_other__others": [
    "Redux persist",
    "React native keychain",
    "rn-fetch-blob",
    "react-native-secure-key-store",
    "Firestore",
    "React Native Quick SQL",
    "Quick-sqlite",
    "redux-persist",
    "react-native-keychain",
    "Expo-secure-storage",
    "expo-secure-store",
    "File system",
    "react-native-encrypted-storage",
    "file system",
    "URQL Graphcache"
  ],
  "rn2022__developer_background_before__developer_background_before_other__others": [
    "I am currently at my senior year in Computer Engineering.So React Native is my first professional area.",
    "Working as a full Stack web development teacher on high school.  ",
    "Industrial Hygiene Auditor and Chemical Engineer",
    "Management",
    "Engineering ",
    "I am 46 and I used to be an IT director in a big telecom operator. ",
    ".Net developer",
    "GraphQL",
    "Mechanical, speciality engineering, Aerospace engineering",
    "Cordova",
    "I was student",
    "Automation software engineer and video game developer",
    "Jquery, WordPress ",
    "Angular, JS and basic web dev and being a CS student",
    "Ionic",
    "Education",
    "Game, console/Linux",
    "Generalist",
    "C# ",
    "Phonegap",
    "Titanium",
    "fullstack",
    "Graphic Designer",
    "Java Core",
    "php, js, c++, asm",
    "designer",
    "Data engineering / analytics",
    "C++",
    "Student and then DevOps",
    "Mobile developer with hybrid framework (Ionic)",
    "Cordova/PhoneGap",
    "Systems programmer in C/C++ and assembly languages",
    "Fullstack developer and parttime designer ",
    "Student",
    "10",
    "Ruby on Rails",
    "Node.JS, Angular, KnockoutJS"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_data_visualisation_other__others": [
    "Manually done: d3 + react native svg or skia",
    "echarts with webview",
    "D3",
    "NA",
    "HighCharts API",
    "react-xr ",
    "In house for full customization ",
    "react-native-graph",
    "Data visualization is really, really bad for React Native in my experience. Web and SwiftUI have far better solutions.",
    "highcharts",
    "react-native-wagmi-charts"
  ],
  "rn2022__platform_apis__platform_apis_other__others": [
    "WidgetKit",
    "Wifi interactions",
    "Quickactions, widgets",
    "serial port",
    "Apple Health and GoogleGit"
  ],
  "rn2022__navigation__navigation_other__others": [
    "Reactigation",
    "I hate react navigation",
    "Solito",
    "wix navigation",
    "React-native-ridge-navigation",
    "wix/react-native-navigation",
    "react-native-url-router",
    "Solito!",
    "We implement our own navigation with a library we developed for our selves. ( Named react-native-animated-layout). In future we are thinking to combine this with expo-router. ",
    "Custom",
    "your own react-native-url-router from software-mansion-labs ‚Ä¶ weird it wasn‚Äôt mentioned",
    "solito"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_analytics_other__others": [
    "Tealium",
    "Adobe Analytics",
    "Freshpaint",
    "Statsig",
    "Fanthom ",
    "Rutterstack",
    "in-house",
    "Heap Analytics",
    "Posthog",
    "In-house Solution",
    "Adobe",
    "Splitbee",
    "Axiom",
    "Rudderstack",
    "Branch.io",
    "SearchNode, Adjust, Braze",
    "Gainsight",
    "posthog",
    "Adjust",
    "Simple fetch calls, rendered in mixpanel",
    "yandex.mertika",
    "Branch, Airship",
    "Google Analytics",
    "new-relic",
    "Heap",
    "piano analytics"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_crash_reporting_other__others": [
    "LogRocket",
    "Bugsee",
    "Dynatrace",
    "Rollbar",
    "Bugfender ",
    "Logrocket"
  ],
  "rn2022__component_libraries__component_libraries_other__others": [
    " Tamagui",
    "Tamagui ",
    "Tamagui is great.",
    "Not bothered about UI libraries they‚Äôve never come in handy for clients projects.",
    "Tamagui üêê ",
    "Rainbow Design System",
    "I would recommend to use `@td-design/react-native` if you're Chinese developers.",
    "Magnus-UI üëå",
    "react-native-extended-stylesheet",
    "Tamagui",
    "naxos",
    "Ignite",
    "I find myself lacking exploration for this section.",
    "Ignite's built-in components",
    "Tamagui is also a component library!",
    "SpiroKit"
  ],
  "rn2022__react_native_specific_features__react_native_features_debugging_other__others": [
    "Vscode, console.log",
    "Safari",
    "I wish debugging experience is much more mature and stable. Everyone seems to have an approach yet there isn't a defacto debugging experience. Plus hot reloading most of the time kills the app in the simulator making it a not-so-fun experience.",
    "ClojureScript REPL ",
    "Chrome DevTools with Hermes, specifically",
    "VS Code Extension for React Native debugging ",
    "An utter mess",
    "Chrome DevTools via expo (not to be confused with async debugging)"
  ],
  "rn2022__developer_background_platforms__developer_background_platforms_other__others": [
    "ePaper devices",
    "Game Consoles",
    "TvOS",
    "IpadOs",
    "Android but Huawei AppGallery"
  ],
  "rn2022__react_native_specific_features__react_native_features_performance_profile_other__others": [
    "Chrome‚Äôs profiler tab",
    "Performance tools need better UIs associated with them.",
    "Intel vTune, PlayStation Razor, cachegrind ",
    "Chrome Performance Insights",
    "why-did-you-render",
    "android-performance-profiler",
    "reassure"
  ],
  "rn2022__resources__resources_surveys_other__others": [
    "Digital Ocean Currents",
    "State of react"
  ],
  "rn2022__animations__animations_other__others": [
    "Rive",
    "Tamagui üêê ",
    "Rive\nHeard of it\nWould like to learn",
    "Babylonjs",
    "Rive looks very interesting",
    "React Spring",
    "react spring",
    "Tamagui supports animations. It has its own API but with pluggable animation drivers (reanimated etc.)."
  ],
  "rn2022__react_native_specific_features__react_native_features_mobile_web_code_sharing_other__others": [
    "Shared UI system design; analytics; and some other libraries common to both platforms.",
    "Expo Web with RNW",
    "Expo web",
    "Code sharing with React Native feels like you don't get the best of either platform",
    "react-native-web is the reason we stick with react-native"
  ],
  "rn2022__react_native_app_aspects__react_native_app_aspects_testing_other__others": [
    "fast-check",
    "cavy",
    "Enzyme",
    "React Native Owl",
    "Cypress",
    "testing visual regression using a custom solution with reg-viz",
    "Moropo (private alpha)",
    "Waldo",
    "Love detox and maestro looks super promising. Sadly right now appium is the only one I know of that can run tests on an actual iOS device. "
  ],
  "rn2022__monorepo_tools__monorepo_tools_other__others": [
    "git-submodule",
    "lage"
  ],
  "rn2022__about_you__about_you_how_you_know": [
    "From @tsapeta on Twitter",
    "Following Bacon ",
    "everything nice",
    "e-mail",
    "Twitter, Email etc",
    "evan bacon tweet",
    "Software Mansion twitter",
    "From twitter",
    "Colleague",
    "from twitter",
    "Posted in a work related channel on Slack",
    "It was nice, can't wait to see the output of it",
    "Evan ü•ì ",
    "From email",
    "evan bacon",
    "A collegue of mine",
    "Andrei Calazans tweet",
    "Saw link of survey from twitter",
    "@gregoirevda is my twitter handle too lazy to login ",
    "Twitter, GitHub, Software Mansion, Evan Bacon",
    "Email",
    "dk",
    "twtr",
    "utah react native slack",
    "Through LinkedIn",
    "React Native Squad Telegram",
    "It was so great! I even haven't heard of some libraries :) I got to know them.",
    "twitter",
    "Callstack Twitter ",
    "swmansion Twitter",
    "Twittter I think",
    "Twitter.com",
    "I've created it",
    "Software Mansion Twitter post",
    "EVAN BACON ON TWITTER",
    "Bacon",
    "Coworker (Jamon Holmgren)",
    "https://twitter.com/Baconbrix/status/1606162233242750976",
    "Evan bacon tweet",
    "Collegue talk about it and give me the link",
    "Software mansion",
    "big expo fan!",
    "twitrer",
    "I work at SWM",
    "Nice with a lot of proposals on all the prisms concerning React Native",
    "Software Mansion :)",
    "Social media, email marketing",
    "üëç ",
    "Callstack",
    "Evan bacon's twitter",
    "Shared in a local Slack group",
    "Twitter ",
    "Software mansion's twitter page",
    "A colleague shared ",
    "Software mansion twitter",
    "Received email",
    "Tamagui",
    "Evan Bacon on Twitter",
    "Good",
    "SWM Twitter Account",
    "by Evan Bacon from Expo team.",
    "Our CEO",
    "Friend from work shared it on our channel with other react native devs",
    "Newsletter",
    "Mail",
    "Great",
    "evans bacon twitter",
    "the Software Mansion newsletter",
    "Follows Software Mansion. So got email",
    "Not sure anymore!",
    "bacon twitter",
    "Tweet",
    "Expo team ( Evan's Twitter)",
    "Twitter by Expo folks",
    "Evan Bacon twitter",
    "Evan Bacon twitter ",
    "Twitter",
    "Evan Bacons twitter post",
    "I follow software mansion",
    "WhatsApp group ",
    "Software Mansion",
    " Evan Bacon on Twitter"
  ],
  "rn2022__about_you__about_you_what_to_improve": [
    "Make it shorter.",
    "Sometimes I don‚Äôt have any opinion, for which I don‚Äôt feel there‚Äôs an option in most questions",
    "I think the option answers can be improved ",
    "Make it more obvious what this survey is for, that is why people are answering it. But good otherwise (Y)",
    "Shorter",
    "Select button UI",
    "The options for \"Heard of, not interested\", \"Used, would use again\", etc type of questions are not inclusive of the reality of use cases. For example, the implication behind \"Heard of, want to learn\" is not the same as \"Heard of, need to know more before I decide if I want to learn or use it\".",
    "Looks good as-is!",
    "less freeform answers :) ",
    "<3",
    "magic login went to spam",
    "Add MobX as option for state management ;)",
    "Improving UI",
    "its ok",
    "Some memes/photos would be great",
    "Seemed good to me üëç",
    "It's already perfect.",
    "make \"would use again\" the first option!",
    "Answers were lost few times before I could go to next section and send request from form to save my answers. It was look like re-renders with losing input state or reload of the page",
    "Too many questions ",
    "This survey is great, but I would be really great to maybe have some popular options to questions about blogs, websites, communities and people. But it‚Äôs not a big deal",
    "Add disclaimer and when result will be relsase",
    "Use smaller padding between answers",
    "yes, for some questions I do not have any answers, maybe it's better to add a new option to ignore or something like that",
    "Iterate over questions; add new more accurate questions that better resembles current state of React Native; remove too niche questions; mobilize community to join the content creation process; engage more people in work on next year edition",
    "It was great, thank you for putting it together! However, I do think MobX should have been included in the state management section :)",
    "Give anything you want to improve to Expo team",
    "Links to resources",
    "Literally nothing to improve",
    "Awesome survey except for some percentages now showing 100%",
    "Progressbar",
    "show results after finish survey",
    "is long but cool",
    "Reduce unpopular options (a few)",
    "Better form buttons. Some of the multi-select options get a bit long. For the ‚Äúversion of React Native‚Äù I wasn‚Äôt sure and had to look up whatever Expo was on. ",
    "Separate surveys per sections. Having them all together implies the single developer is involved in all aspects of the app developement ex. Areas in QA DevOps ",
    "less questions",
    "It's perfect",
    "Include bogus technology names to weed out bad data",
    "Less free form ",
    "It‚Äôs been great to see many things I don‚Äôt know about, maybe some links to the subjects and libraries mentioned in the options",
    "Its fine",
    "toooo long",
    "Reach more react native developer",
    "Add \"Heard of it but don't know what it is\" option hehe!"
  ]
}