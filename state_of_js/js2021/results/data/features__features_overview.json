{
  "dataAPI": {
    "survey": {
      "features_overview": [
        {
          "id": "proxies",
          "entity": {
            "name": "Proxies",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
              "title": "Proxy",
              "summary": "The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14605,
                "percentage_survey": 90.8
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6346,
                      "percentage_question": 43.5,
                      "percentage_survey": 39.5
                    },
                    {
                      "id": "never_heard",
                      "count": 4459,
                      "percentage_question": 30.6,
                      "percentage_survey": 27.8
                    },
                    {
                      "id": "used",
                      "count": 3800,
                      "percentage_question": 26.1,
                      "percentage_survey": 23.7
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "promise_all_settled",
          "entity": {
            "name": "`Promise.allSettled()`",
            "nameClean": "Promise.allSettled()",
            "nameHtml": "<code>Promise.allSettled()</code>",
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",
              "title": "Promise.allSettled()",
              "summary": "The Promise.allSettled() method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14594,
                "percentage_survey": 90.8
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6763,
                      "percentage_question": 46.4,
                      "percentage_survey": 42.1
                    },
                    {
                      "id": "never_heard",
                      "count": 5068,
                      "percentage_question": 34.8,
                      "percentage_survey": 31.6
                    },
                    {
                      "id": "used",
                      "count": 2763,
                      "percentage_question": 19,
                      "percentage_survey": 17.2
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "dynamic_import",
          "entity": {
            "name": "Dynamic Import",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import",
              "title": "import",
              "summary": "The static import declaration is used to import read-only live bindings which are exported by another module. The imported bindings are called live bindings because they are updated by the module that exported the binding, but cannot be modified by the importing module."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14602,
                "percentage_survey": 90.8
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "used",
                      "count": 7137,
                      "percentage_question": 48.9,
                      "percentage_survey": 44.4
                    },
                    {
                      "id": "heard",
                      "count": 5242,
                      "percentage_question": 35.9,
                      "percentage_survey": 32.6
                    },
                    {
                      "id": "never_heard",
                      "count": 2223,
                      "percentage_question": 15.3,
                      "percentage_survey": 13.9
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "nullish_coalescing",
          "entity": {
            "name": "Nullish Coalescing",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing",
              "title": "Nullish coalescing operator (??)",
              "summary": "The nullish coalescing operator (??) is a logical\n  operator that returns its right-hand side operand when its left-hand side operand is\n  null or undefined, and otherwise returns its left-hand side\n  operand."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14594,
                "percentage_survey": 90.8
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "used",
                      "count": 9807,
                      "percentage_question": 67.2,
                      "percentage_survey": 61
                    },
                    {
                      "id": "heard",
                      "count": 2779,
                      "percentage_question": 19.1,
                      "percentage_survey": 17.3
                    },
                    {
                      "id": "never_heard",
                      "count": 2008,
                      "percentage_question": 13.8,
                      "percentage_survey": 12.5
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "optional_chaining",
          "entity": {
            "name": "Optional Chaining",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
              "title": "Optional chaining (?.)",
              "summary": "The optional chaining operator (?.) accesses an object's property or calls a function. If the object is undefined or null, it returns undefined instead of throwing an error."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14571,
                "percentage_survey": 90.6
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "used",
                      "count": 12495,
                      "percentage_question": 85.8,
                      "percentage_survey": 77.7
                    },
                    {
                      "id": "heard",
                      "count": 1182,
                      "percentage_question": 8.2,
                      "percentage_survey": 7.4
                    },
                    {
                      "id": "never_heard",
                      "count": 894,
                      "percentage_question": 6.2,
                      "percentage_survey": 5.6
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "private_fields",
          "entity": {
            "name": "Private Fields",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields",
              "title": "Private class features",
              "summary": "Class fields are public by default, but private class members can be created by using a hash # prefix. The privacy encapsulation of these class features is enforced by JavaScript itself."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14586,
                "percentage_survey": 90.7
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 7105,
                      "percentage_question": 48.8,
                      "percentage_survey": 44.2
                    },
                    {
                      "id": "never_heard",
                      "count": 4506,
                      "percentage_question": 30.9,
                      "percentage_survey": 28.1
                    },
                    {
                      "id": "used",
                      "count": 2975,
                      "percentage_question": 20.4,
                      "percentage_survey": 18.5
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "big_int",
          "entity": {
            "name": "`BigInt`",
            "nameClean": "BigInt",
            "nameHtml": "<code>BigInt</code>",
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
              "title": "BigInt",
              "summary": "BigInt values represent numeric values which are too large to be represented by the number primitive."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14565,
                "percentage_survey": 90.6
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 9531,
                      "percentage_question": 65.5,
                      "percentage_survey": 59.3
                    },
                    {
                      "id": "never_heard",
                      "count": 2638,
                      "percentage_question": 18.2,
                      "percentage_survey": 16.4
                    },
                    {
                      "id": "used",
                      "count": 2396,
                      "percentage_question": 16.5,
                      "percentage_survey": 14.9
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "numeric_separators",
          "entity": {
            "name": "Numeric Separators",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "mdn-javascript_grammar_numeric_separators",
              "url": "https://caniuse.com/mdn-javascript_grammar_numeric_separators"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar",
              "title": "Lexical grammar",
              "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include control characters, line terminators, white space, and comments. The others, such as identifiers and punctuators, will be used for further syntax analysis. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to make certain invalid token sequences become valid."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14530,
                "percentage_survey": 90.4
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 7821,
                      "percentage_question": 53.9,
                      "percentage_survey": 48.7
                    },
                    {
                      "id": "heard",
                      "count": 4359,
                      "percentage_question": 30,
                      "percentage_survey": 27.1
                    },
                    {
                      "id": "used",
                      "count": 2350,
                      "percentage_question": 16.2,
                      "percentage_survey": 14.7
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "string_replace_all",
          "entity": {
            "name": "`String.prototype.replaceAll()`",
            "nameClean": "String.prototype.replaceAll()",
            "nameHtml": "<code>String.prototype.replaceAll()</code>",
            "homepage": null,
            "caniuse": {
              "name": "mdn-javascript_builtins_string_replaceall",
              "url": "https://caniuse.com/mdn-javascript_builtins_string_replaceall"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll",
              "title": "String.prototype.replaceAll()",
              "summary": "The replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. The original string is left unchanged."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14544,
                "percentage_survey": 90.5
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "used",
                      "count": 6171,
                      "percentage_question": 42.5,
                      "percentage_survey": 38.4
                    },
                    {
                      "id": "heard",
                      "count": 5477,
                      "percentage_question": 37.7,
                      "percentage_survey": 34.1
                    },
                    {
                      "id": "never_heard",
                      "count": 2896,
                      "percentage_question": 20,
                      "percentage_survey": 18.1
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "string_match_all",
          "entity": {
            "name": "`String.prototype.matchAll()`",
            "nameClean": "String.prototype.matchAll()",
            "nameHtml": "<code>String.prototype.matchAll()</code>",
            "homepage": null,
            "caniuse": {
              "name": "mdn-javascript_builtins_string_matchall",
              "url": "https://caniuse.com/mdn-javascript_builtins_string_matchall"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll",
              "title": "String.prototype.matchAll()",
              "summary": "The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14532,
                "percentage_survey": 90.4
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6395,
                      "percentage_question": 44.1,
                      "percentage_survey": 39.8
                    },
                    {
                      "id": "never_heard",
                      "count": 4432,
                      "percentage_question": 30.5,
                      "percentage_survey": 27.6
                    },
                    {
                      "id": "used",
                      "count": 3705,
                      "percentage_question": 25.5,
                      "percentage_survey": 23.1
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "logical_assignment",
          "entity": {
            "name": "Logical Assignment",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "mdn-javascript_operators_logical_and_assignment",
              "url": "https://caniuse.com/mdn-javascript_operators_logical_and_assignment"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment",
              "title": "Logical AND assignment (&&=)",
              "summary": "The logical AND assignment (x &&= y) operator only assigns if x is truthy."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14523,
                "percentage_survey": 90.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 8066,
                      "percentage_question": 55.6,
                      "percentage_survey": 50.2
                    },
                    {
                      "id": "heard",
                      "count": 3582,
                      "percentage_question": 24.7,
                      "percentage_survey": 22.3
                    },
                    {
                      "id": "used",
                      "count": 2875,
                      "percentage_question": 19.8,
                      "percentage_survey": 17.9
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "promise_any",
          "entity": {
            "name": "`Promise.any()`",
            "nameClean": "Promise.any()",
            "nameHtml": "<code>Promise.any()</code>",
            "homepage": null,
            "caniuse": {
              "name": "mdn-javascript_builtins_promise_any",
              "url": "https://caniuse.com/mdn-javascript_builtins_promise_any"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any",
              "title": "Promise.any()",
              "summary": "The Promise.any() method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an AggregateError containing an array of rejection reasons."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14524,
                "percentage_survey": 90.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6470,
                      "percentage_question": 44.6,
                      "percentage_survey": 40.3
                    },
                    {
                      "id": "used",
                      "count": 4560,
                      "percentage_question": 31.4,
                      "percentage_survey": 28.4
                    },
                    {
                      "id": "never_heard",
                      "count": 3494,
                      "percentage_question": 24.1,
                      "percentage_survey": 21.8
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "array_at",
          "entity": {
            "name": "`Array.prototype.at()`",
            "nameClean": "Array.prototype.at()",
            "nameHtml": "<code>Array.prototype.at()</code>",
            "homepage": null,
            "caniuse": {
              "name": "mdn-javascript_builtins_array_at",
              "url": "https://caniuse.com/mdn-javascript_builtins_array_at"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at",
              "title": "Array.prototype.at()",
              "summary": "The at() method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14524,
                "percentage_survey": 90.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 6642,
                      "percentage_question": 45.8,
                      "percentage_survey": 41.3
                    },
                    {
                      "id": "heard",
                      "count": 5437,
                      "percentage_question": 37.5,
                      "percentage_survey": 33.8
                    },
                    {
                      "id": "used",
                      "count": 2445,
                      "percentage_question": 16.9,
                      "percentage_survey": 15.2
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "top_level_await",
          "entity": {
            "name": "Top Level `await()`",
            "nameClean": "Top Level await()",
            "nameHtml": "Top Level <code>await()</code>",
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
              "title": "await",
              "summary": "The await operator is used to wait for a Promise and get its fulfillment value. It can only be used inside an async function or at the top level of a module."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 14540,
                "percentage_survey": 90.4
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 5011,
                      "percentage_question": 34.5,
                      "percentage_survey": 31.2
                    },
                    {
                      "id": "never_heard",
                      "count": 4902,
                      "percentage_question": 33.8,
                      "percentage_survey": 30.5
                    },
                    {
                      "id": "used",
                      "count": 4627,
                      "percentage_question": 31.9,
                      "percentage_survey": 28.8
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "service_workers",
          "entity": {
            "name": "Service Workers",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API",
              "title": "Service Worker API",
              "summary": "Service workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13543,
                "percentage_survey": 84.2
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6210,
                      "percentage_question": 45.9,
                      "percentage_survey": 38.7
                    },
                    {
                      "id": "used",
                      "count": 6177,
                      "percentage_question": 45.7,
                      "percentage_survey": 38.4
                    },
                    {
                      "id": "never_heard",
                      "count": 1156,
                      "percentage_question": 8.6,
                      "percentage_survey": 7.2
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "intl",
          "entity": {
            "name": "`Intl`",
            "nameClean": "Intl",
            "nameHtml": "<code>Intl</code>",
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl",
              "title": "Intl",
              "summary": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13618,
                "percentage_survey": 84.7
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 4897,
                      "percentage_question": 36,
                      "percentage_survey": 30.5
                    },
                    {
                      "id": "used",
                      "count": 4896,
                      "percentage_question": 36,
                      "percentage_survey": 30.5
                    },
                    {
                      "id": "heard",
                      "count": 3825,
                      "percentage_question": 28.1,
                      "percentage_survey": 23.8
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "web_audio",
          "entity": {
            "name": "Web Audio",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API",
              "title": "Web Audio API",
              "summary": "The Web Audio API provides a powerful and versatile system for controlling audio on the Web, allowing developers to choose audio sources, add effects to audio, create audio visualizations, apply spatial effects (such as panning) and much more."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13697,
                "percentage_survey": 85.2
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 7670,
                      "percentage_question": 56,
                      "percentage_survey": 47.7
                    },
                    {
                      "id": "used",
                      "count": 3077,
                      "percentage_question": 22.5,
                      "percentage_survey": 19.2
                    },
                    {
                      "id": "never_heard",
                      "count": 2950,
                      "percentage_question": 21.6,
                      "percentage_survey": 18.4
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "webgl",
          "entity": {
            "name": "WebGL",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL",
              "title": "Getting started with WebGL",
              "summary": "WebGL enables web content to use an API based on OpenGL ES 2.0 to perform 2D and 3D rendering in an HTML canvas in browsers that support it without the use of plug-ins."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13718,
                "percentage_survey": 85.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 9066,
                      "percentage_question": 66.1,
                      "percentage_survey": 56.4
                    },
                    {
                      "id": "used",
                      "count": 2958,
                      "percentage_question": 21.6,
                      "percentage_survey": 18.4
                    },
                    {
                      "id": "never_heard",
                      "count": 1694,
                      "percentage_question": 12.4,
                      "percentage_survey": 10.6
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "web_animations",
          "entity": {
            "name": "Web Animations",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API",
              "title": "Using the Web Animations API",
              "summary": "The Web Animations API lets us construct animations and control their playback with JavaScript. This article will start you off in the right direction with fun demos and tutorials featuring Alice in Wonderland."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13716,
                "percentage_survey": 85.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 7047,
                      "percentage_question": 51.4,
                      "percentage_survey": 43.9
                    },
                    {
                      "id": "never_heard",
                      "count": 4094,
                      "percentage_question": 29.9,
                      "percentage_survey": 25.5
                    },
                    {
                      "id": "used",
                      "count": 2575,
                      "percentage_question": 18.8,
                      "percentage_survey": 16.1
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "webrtc",
          "entity": {
            "name": "WebRTC",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API",
              "title": "WebRTC API",
              "summary": "WebRTC (Web Real-Time Communication) is a technology that enables Web applications and sites to capture and optionally stream audio and/or video media, as well as to exchange arbitrary data between browsers without requiring an intermediary. The set of standards that comprise WebRTC makes it possible to share data and perform teleconferencing peer-to-peer, without requiring that the user install plug-ins or any other third-party software."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13714,
                "percentage_survey": 85.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 7210,
                      "percentage_question": 52.6,
                      "percentage_survey": 44.9
                    },
                    {
                      "id": "never_heard",
                      "count": 4164,
                      "percentage_question": 30.4,
                      "percentage_survey": 25.9
                    },
                    {
                      "id": "used",
                      "count": 2340,
                      "percentage_question": 17.1,
                      "percentage_survey": 14.6
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "web_speech",
          "entity": {
            "name": "Web Speech API",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API",
              "title": "Web Speech API",
              "summary": "The Web Speech API enables you to incorporate voice data into web apps.\n  The Web Speech API has two parts: SpeechSynthesis (Text-to-Speech), and SpeechRecognition (Asynchronous Speech Recognition.)"
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13732,
                "percentage_survey": 85.4
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6815,
                      "percentage_question": 49.7,
                      "percentage_survey": 42.4
                    },
                    {
                      "id": "never_heard",
                      "count": 5541,
                      "percentage_question": 40.4,
                      "percentage_survey": 34.5
                    },
                    {
                      "id": "used",
                      "count": 1376,
                      "percentage_question": 10.1,
                      "percentage_survey": 8.6
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "websocket",
          "entity": {
            "name": "WebSocket",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API",
              "title": "The WebSocket API (WebSockets)",
              "summary": "The WebSocket API is an advanced technology that makes it possible to open a two-way interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive event-driven responses without having to poll the server for a reply."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13779,
                "percentage_survey": 85.7
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "used",
                      "count": 9174,
                      "percentage_question": 66.6,
                      "percentage_survey": 57.1
                    },
                    {
                      "id": "heard",
                      "count": 4066,
                      "percentage_question": 29.6,
                      "percentage_survey": 25.3
                    },
                    {
                      "id": "never_heard",
                      "count": 539,
                      "percentage_question": 4,
                      "percentage_survey": 3.4
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "custom_elements",
          "entity": {
            "name": "Custom Elements",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/Web_Components",
              "title": "Web Components",
              "summary": "Web Components is a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13735,
                "percentage_survey": 85.4
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 5237,
                      "percentage_question": 38.2,
                      "percentage_survey": 32.6
                    },
                    {
                      "id": "used",
                      "count": 5090,
                      "percentage_question": 37.1,
                      "percentage_survey": 31.7
                    },
                    {
                      "id": "never_heard",
                      "count": 3408,
                      "percentage_question": 24.9,
                      "percentage_survey": 21.2
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "shadow_dom",
          "entity": {
            "name": "Shadow DOM",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/Web_Components",
              "title": "Web Components",
              "summary": "Web Components is a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13755,
                "percentage_survey": 85.6
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "used",
                      "count": 6446,
                      "percentage_question": 46.9,
                      "percentage_survey": 40.1
                    },
                    {
                      "id": "heard",
                      "count": 5100,
                      "percentage_question": 37.1,
                      "percentage_survey": 31.8
                    },
                    {
                      "id": "never_heard",
                      "count": 2209,
                      "percentage_question": 16.1,
                      "percentage_survey": 13.8
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "page_visibility",
          "entity": {
            "name": "Page Visibility API",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "pagevisibility",
              "url": "https://caniuse.com/pagevisibility"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API",
              "title": "Page Visibility API",
              "summary": "The Page Visibility API provides events you can watch for to know when a document becomes visible or hidden, as well as features to look at the current visibility state of the page."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13714,
                "percentage_survey": 85.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 8867,
                      "percentage_question": 64.7,
                      "percentage_survey": 55.2
                    },
                    {
                      "id": "heard",
                      "count": 2893,
                      "percentage_question": 21.1,
                      "percentage_survey": 18
                    },
                    {
                      "id": "used",
                      "count": 1954,
                      "percentage_question": 14.3,
                      "percentage_survey": 12.2
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "broadcast_channel",
          "entity": {
            "name": "Broadcast Channel API",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "broadcastchannel",
              "url": "https://caniuse.com/broadcastchannel"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",
              "title": "Broadcast Channel API",
              "summary": "The Broadcast Channel API allows basic communication between browsing contexts (that is, windows, tabs, frames, or iframes) and workers on the same origin."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13713,
                "percentage_survey": 85.3
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 10791,
                      "percentage_question": 78.7,
                      "percentage_survey": 67.1
                    },
                    {
                      "id": "heard",
                      "count": 2159,
                      "percentage_question": 15.8,
                      "percentage_survey": 13.5
                    },
                    {
                      "id": "used",
                      "count": 763,
                      "percentage_question": 5.6,
                      "percentage_survey": 4.8
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "geolocation",
          "entity": {
            "name": "Geolocation API",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "geolocation",
              "url": "https://caniuse.com/geolocation"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API",
              "title": "Geolocation API",
              "summary": "The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13759,
                "percentage_survey": 85.6
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6134,
                      "percentage_question": 44.6,
                      "percentage_survey": 38.2
                    },
                    {
                      "id": "used",
                      "count": 5211,
                      "percentage_question": 37.9,
                      "percentage_survey": 32.4
                    },
                    {
                      "id": "never_heard",
                      "count": 2414,
                      "percentage_question": 17.6,
                      "percentage_survey": 15.1
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "file_system_access",
          "entity": {
            "name": "File System Access API",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "native-filesystem-api",
              "url": "https://caniuse.com/native-filesystem-api"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API",
              "title": "File System Access API",
              "summary": "The File System Access API allows read, write and file management capabilities."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13755,
                "percentage_survey": 85.6
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 6650,
                      "percentage_question": 48.4,
                      "percentage_survey": 41.4
                    },
                    {
                      "id": "never_heard",
                      "count": 3892,
                      "percentage_question": 28.3,
                      "percentage_survey": 24.2
                    },
                    {
                      "id": "used",
                      "count": 3213,
                      "percentage_question": 23.4,
                      "percentage_survey": 20
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "web_share",
          "entity": {
            "name": "Web Share API",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "web-share",
              "url": "https://caniuse.com/web-share"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Share_API",
              "title": "Web Share API",
              "summary": "The Web Share API provides a mechanism for sharing text, links, files, and other content to an arbitrary share target selected by the user."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13737,
                "percentage_survey": 85.4
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 8992,
                      "percentage_question": 65.5,
                      "percentage_survey": 55.9
                    },
                    {
                      "id": "heard",
                      "count": 3455,
                      "percentage_question": 25.2,
                      "percentage_survey": 21.5
                    },
                    {
                      "id": "used",
                      "count": 1290,
                      "percentage_question": 9.4,
                      "percentage_survey": 8.1
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "webxr",
          "entity": {
            "name": "WebXR Device API",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": {
              "name": "webxr",
              "url": "https://caniuse.com/webxr"
            },
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/WebXR_Device_API",
              "title": "WebXR Device API",
              "summary": "WebXR is a group of standards which are used together to support rendering 3D scenes to hardware designed for presenting virtual worlds (virtual reality, or VR), or for adding graphical imagery to the real world, (augmented reality, or AR). The WebXR Device API implements the core of the WebXR feature set, managing the selection of output devices, render the 3D scene to the chosen device at the appropriate frame rate, and manage motion vectors created using input controllers."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13759,
                "percentage_survey": 85.6
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "never_heard",
                      "count": 11507,
                      "percentage_question": 83.7,
                      "percentage_survey": 71.6
                    },
                    {
                      "id": "heard",
                      "count": 1979,
                      "percentage_question": 14.4,
                      "percentage_survey": 12.4
                    },
                    {
                      "id": "used",
                      "count": 273,
                      "percentage_question": 2,
                      "percentage_survey": 1.7
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "pwa",
          "entity": {
            "name": "Progressive Web Apps",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps",
              "title": "Progressive web apps (PWAs)",
              "summary": "Progressive Web Apps (PWAs) are web apps that use service workers, manifests, and other web-platform features in combination with progressive enhancement to give users an experience on par with native apps."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13530,
                "percentage_survey": 84.2
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "used",
                      "count": 8402,
                      "percentage_question": 62.1,
                      "percentage_survey": 52.3
                    },
                    {
                      "id": "heard",
                      "count": 4640,
                      "percentage_question": 34.3,
                      "percentage_survey": 28.9
                    },
                    {
                      "id": "never_heard",
                      "count": 488,
                      "percentage_question": 3.7,
                      "percentage_survey": 3.1
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "id": "wasm",
          "entity": {
            "name": "WebAssembly (WASM)",
            "nameClean": null,
            "nameHtml": null,
            "homepage": null,
            "caniuse": null,
            "mdn": {
              "locale": "en-US",
              "url": "https://developer.mozilla.org/en-US/docs/WebAssembly",
              "title": "WebAssembly",
              "summary": "WebAssembly is a new type of code that can be run in modern web browsers — it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++, C# and Rust with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together."
            }
          },
          "experience": {
            "keys": [
              "never_heard",
              "heard",
              "used"
            ],
            "year": {
              "year": 2021,
              "completion": {
                "total": 16087,
                "count": 13666,
                "percentage_survey": 85
              },
              "facets": [
                {
                  "type": "default",
                  "id": "default",
                  "buckets": [
                    {
                      "id": "heard",
                      "count": 9892,
                      "percentage_question": 72.4,
                      "percentage_survey": 61.5
                    },
                    {
                      "id": "used",
                      "count": 2121,
                      "percentage_question": 15.6,
                      "percentage_survey": 13.2
                    },
                    {
                      "id": "never_heard",
                      "count": 1653,
                      "percentage_question": 12.1,
                      "percentage_survey": 10.3
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    }
  }
}